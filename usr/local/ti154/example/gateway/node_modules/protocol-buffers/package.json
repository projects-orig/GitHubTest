{
  "name": "protocol-buffers",
  "version": "3.2.1",
  "description": "Protocol Buffers for Node.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/mafintosh/protocol-buffers"
  },
  "dependencies": {
    "brfs": "^1.4.0",
    "generate-function": "^2.0.0",
    "generate-object-property": "^1.2.0",
    "protocol-buffers-schema": "^3.1.1",
    "signed-varint": "^2.0.0",
    "varint": "^5.0.0"
  },
  "devDependencies": {
    "standard": "^5.4.1",
    "tape": "^3.0.3"
  },
  "scripts": {
    "test": "standard && tape test/*.js",
    "bench": "node bench"
  },
  "browserify": {
    "transform": [
      "brfs"
    ]
  },
  "bugs": {
    "url": "https://github.com/mafintosh/protocol-buffers/issues"
  },
  "homepage": "https://github.com/mafintosh/protocol-buffers",
  "main": "index.js",
  "directories": {
    "test": "test"
  },
  "keywords": [
    "protobuf",
    "protocol",
    "buffers",
    "protocolbuffers",
    "encode",
    "decode",
    "google",
    "serialize",
    "parse",
    "levelup",
    "encodings",
    "encoding"
  ],
  "author": {
    "name": "Mathias Buus"
  },
  "license": "MIT",
  "readme": "# protocol-buffers\n\n[Protocol Buffers](https://developers.google.com/protocol-buffers/) for Node.js\n\n```\nnpm install protocol-buffers\n```\n\n[![build status](https://travis-ci.org/mafintosh/protocol-buffers.svg?branch=master)](https://travis-ci.org/mafintosh/protocol-buffers)\n![dat](http://img.shields.io/badge/Development%20sponsored%20by-dat-green.svg?style=flat)\n\n## Usage\n\nAssuming the following `test.proto` file exists\n\n```proto\nenum FOO {\n  BAR = 1;\n}\n\nmessage Test {\n  required float num  = 1;\n  required string payload = 2;\n}\n\nmessage AnotherOne {\n  repeated FOO list = 1;\n}\n```\n\nUse the above proto file to encode/decode messages by doing\n\n``` js\nvar protobuf = require('protocol-buffers')\n\n// pass a proto file as a buffer/string or pass a parsed protobuf-schema object\nvar messages = protobuf(fs.readFileSync('test.proto'))\n\nvar buf = messages.Test.encode({\n  num: 42,\n  payload: 'hello world'\n})\n\nconsole.log(buf) // should print a buffer\n```\n\nTo decode a message use `Test.decode`\n\n``` js\nvar obj = messages.Test.decode(buf)\nconsole.log(obj) // should print an object similar to above\n```\n\nEnums are accessed in the same way as messages\n\n``` js\nvar buf = messages.AnotherOne.encode({\n  list: [\n    messages.FOO.BAR\n  ]\n})\n```\n\nNested emums are accessed as properties on the corresponding message\n\n``` js\nvar buf = message.SomeMessage.encode({\n  list: [\n    messages.SomeMessage.NESTED_ENUM.VALUE\n  ]\n})\n```\n\nSee the [Google Protocol Buffers docs](https://developers.google.com/protocol-buffers/) for more information about the\navailable types etc.\n\n## Performance\n\nThis module is fast.\n\nIt uses code generation to build as fast as possible encoders/decoders for the protobuf schema.\nYou can run the benchmarks yourself by doing `npm run bench`.\n\nOn my Macbook Air it gives the following results\n\n```\nBenchmarking JSON (baseline)\n  Running object encoding benchmark...\n  Encoded 1000000 objects in 2142 ms (466853 enc/s)\n\n  Running object decoding benchmark...\n  Decoded 1000000 objects in 970 ms (1030928 dec/s)\n\n  Running object encoding+decoding benchmark...\n  Encoded+decoded 1000000 objects in 3131 ms (319387 enc+dec/s)\n\nBenchmarking protocol-buffers\n  Running object encoding benchmark...\n  Encoded 1000000 objects in 2089 ms (478698 enc/s)\n\n  Running object decoding benchmark...\n  Decoded 1000000 objects in 735 ms (1360544 dec/s)\n\n  Running object encoding+decoding benchmark...\n  Encoded+decoded 1000000 objects in 2826 ms (353857 enc+dec/s)\n```\n\nNote that JSON parsing/serialization in node is a native function that is *really* fast.\n\n## Leveldb encoding compatibility\n\nCompiled protocol buffers messages are valid levelup encodings.\nThis means you can pass them as `valueEncoding` and `keyEncoding`.\n\n``` js\nvar level = require('level')\nvar db = level('db')\n\ndb.put('hello', {payload:'world'}, {valueEncoding:messages.Test}, function(err) {\n  db.get('hello', {valueEncoding:messages.Test}, function(err, message) {\n    console.log(message)\n  })\n})\n```\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "_id": "protocol-buffers@3.2.1",
  "dist": {
    "shasum": "512cf25506b6b9edb668bce7c8d1d59f15eed55e"
  },
  "_from": "protocol-buffers@3.2.1",
  "_resolved": "https://registry.npmjs.org/protocol-buffers/-/protocol-buffers-3.2.1.tgz"
}
