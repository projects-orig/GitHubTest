/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: llc.proto */

#ifndef PROTOBUF_C_llc_2eproto__INCLUDED
#define PROTOBUF_C_llc_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1002001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "api_mac.pb-c.h"

typedef struct _LlcNetInfo LlcNetInfo;
typedef struct _LlcDeviceListItem LlcDeviceListItem;


/* --- enums --- */


/* --- messages --- */

/*
 *! Network Information 
 */
struct  _LlcNetInfo
{
  ProtobufCMessage base;
  /*
   *! true if network is frequency hopping 
   */
  uint32_t fh;
  /*
   *! Channel - non FH 
   */
  uint32_t channel;
  /*
   * Address information 
   */
  ApiMacDeviceDescriptor *devinfo;
};
#define LLC_NET_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&llc_net_info__descriptor) \
    , 0, 0, NULL }


/*
 * Structure to store a device list entry in NV 
 */
struct  _LlcDeviceListItem
{
  ProtobufCMessage base;
  /*
   * Address information 
   */
  ApiMacDeviceDescriptor *devinfo;
  /*
   * Device capability 
   */
  ApiMacCapabilityInfo *capinfo;
  /*
   * RX frame counter 
   */
  uint32_t rxframecounter;
};
#define LLC_DEVICE_LIST_ITEM__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&llc_device_list_item__descriptor) \
    , NULL, NULL, 0 }


/* LlcNetInfo methods */
void   llc_net_info__init
                     (LlcNetInfo         *message);
size_t llc_net_info__get_packed_size
                     (const LlcNetInfo   *message);
size_t llc_net_info__pack
                     (const LlcNetInfo   *message,
                      uint8_t             *out);
size_t llc_net_info__pack_to_buffer
                     (const LlcNetInfo   *message,
                      ProtobufCBuffer     *buffer);
LlcNetInfo *
       llc_net_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   llc_net_info__free_unpacked
                     (LlcNetInfo *message,
                      ProtobufCAllocator *allocator);
/* LlcDeviceListItem methods */
void   llc_device_list_item__init
                     (LlcDeviceListItem         *message);
size_t llc_device_list_item__get_packed_size
                     (const LlcDeviceListItem   *message);
size_t llc_device_list_item__pack
                     (const LlcDeviceListItem   *message,
                      uint8_t             *out);
size_t llc_device_list_item__pack_to_buffer
                     (const LlcDeviceListItem   *message,
                      ProtobufCBuffer     *buffer);
LlcDeviceListItem *
       llc_device_list_item__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   llc_device_list_item__free_unpacked
                     (LlcDeviceListItem *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*LlcNetInfo_Closure)
                 (const LlcNetInfo *message,
                  void *closure_data);
typedef void (*LlcDeviceListItem_Closure)
                 (const LlcDeviceListItem *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor llc_net_info__descriptor;
extern const ProtobufCMessageDescriptor llc_device_list_item__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_llc_2eproto__INCLUDED */
