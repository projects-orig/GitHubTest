/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: api_mac.proto */

#ifndef PROTOBUF_C_api_5fmac_2eproto__INCLUDED
#define PROTOBUF_C_api_5fmac_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1002001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _ApiMacSAddr ApiMacSAddr;
typedef struct _ApiMacSData ApiMacSData;
typedef struct _ApiMacMRFSKPHYDesc ApiMacMRFSKPHYDesc;
typedef struct _ApiMacSec ApiMacSec;
typedef struct _ApiMacKeyIdLookupDescriptor ApiMacKeyIdLookupDescriptor;
typedef struct _ApiMacKeyDeviceDescriptor ApiMacKeyDeviceDescriptor;
typedef struct _ApiMacKeyUsageDescriptor ApiMacKeyUsageDescriptor;
typedef struct _ApiMacKeyDescriptor ApiMacKeyDescriptor;
typedef struct _ApiMacDeviceDescriptor ApiMacDeviceDescriptor;
typedef struct _ApiMacSecurityLevelDescriptor ApiMacSecurityLevelDescriptor;
typedef struct _ApiMacSecurityDeviceDescriptor ApiMacSecurityDeviceDescriptor;
typedef struct _ApiMacSecurityKeyEntry ApiMacSecurityKeyEntry;
typedef struct _ApiMacSecurityPibKeyIdLookupEntry ApiMacSecurityPibKeyIdLookupEntry;
typedef struct _ApiMacSecurityPibKeyDeviceEntry ApiMacSecurityPibKeyDeviceEntry;
typedef struct _ApiMacSecurityPibKeyUsageEnttry ApiMacSecurityPibKeyUsageEnttry;
typedef struct _ApiMacSecurityPibKeyEntry ApiMacSecurityPibKeyEntry;
typedef struct _ApiMacSecurityPibDeviceEntry ApiMacSecurityPibDeviceEntry;
typedef struct _ApiMacSecurityPibSecurityLevelEntry ApiMacSecurityPibSecurityLevelEntry;
typedef struct _ApiMacCapabilityInfo ApiMacCapabilityInfo;
typedef struct _ApiMacTxOptions ApiMacTxOptions;
typedef struct _ApiMacMcpsDataReq ApiMacMcpsDataReq;
typedef struct _ApiMacPayloadIeItem ApiMacPayloadIeItem;
typedef struct _ApiMacMcpsDataInd ApiMacMcpsDataInd;
typedef struct _ApiMacMcpsDataCnf ApiMacMcpsDataCnf;
typedef struct _ApiMacMcpsPurgeCnf ApiMacMcpsPurgeCnf;
typedef struct _ApiMacPanDesc ApiMacPanDesc;
typedef struct _ApiMacMlmeAssociateReq ApiMacMlmeAssociateReq;
typedef struct _ApiMacMlmeAssociateRsp ApiMacMlmeAssociateRsp;
typedef struct _ApiMacMlmeDisassociateReq ApiMacMlmeDisassociateReq;
typedef struct _ApiMacMlmeOrphanRsp ApiMacMlmeOrphanRsp;
typedef struct _ApiMacMlmePollReq ApiMacMlmePollReq;
typedef struct _ApiMacMlmeScanReq ApiMacMlmeScanReq;
typedef struct _ApiMacMpmParams ApiMacMpmParams;
typedef struct _ApiMacMlmeStartReq ApiMacMlmeStartReq;
typedef struct _ApiMacSyncReq ApiMacSyncReq;
typedef struct _ApiMacMlmeWSAsyncReq ApiMacMlmeWSAsyncReq;
typedef struct _ApiMacMlmeAssociateInd ApiMacMlmeAssociateInd;
typedef struct _ApiMacMlmeAssociateCnf ApiMacMlmeAssociateCnf;
typedef struct _ApiMacMlmeDisassociateInd ApiMacMlmeDisassociateInd;
typedef struct _ApiMacMlmeDisassociateCnf ApiMacMlmeDisassociateCnf;
typedef struct _ApiMacBeaconData ApiMacBeaconData;
typedef struct _ApiMacCoexist ApiMacCoexist;
typedef struct _ApiMacEBeaconData ApiMacEBeaconData;
typedef struct _ApiMacMlmeBeaconNotifyInd ApiMacMlmeBeaconNotifyInd;
typedef struct _ApiMacMlmeOrphanInd ApiMacMlmeOrphanInd;
typedef struct _ApiMacMlmeScanCnf ApiMacMlmeScanCnf;
typedef struct _ApiMacMlmeStartCnf ApiMacMlmeStartCnf;
typedef struct _ApiMacMlmeSyncLossInd ApiMacMlmeSyncLossInd;
typedef struct _ApiMacMlmePollCnf ApiMacMlmePollCnf;
typedef struct _ApiMacMlmeCommStatusInd ApiMacMlmeCommStatusInd;
typedef struct _ApiMacMlmePollInd ApiMacMlmePollInd;
typedef struct _ApiMacMlmeWsAsyncInd ApiMacMlmeWsAsyncInd;
typedef struct _ApiMacMlmeWsAsyncCnfK ApiMacMlmeWsAsyncCnfK;


/* --- enums --- */

/*
 *! Associate Response status types 
 */
typedef enum _ApiMacAssocStatus {
  /*
   *! Success, join allowed 
   */
  API_MAC_ASSOC_STATUS__ApiMac_assocStatus_success = 0,
  /*
   *! PAN at capacity 
   */
  API_MAC_ASSOC_STATUS__ApiMac_assocStatus_panAtCapacity = 1,
  /*
   *! PAN access denied 
   */
  API_MAC_ASSOC_STATUS__ApiMac_assocStatus_panAccessDenied = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(API_MAC_ASSOC_STATUS)
} ApiMacAssocStatus;
/*
 *!
 *Address types - used to set addrMode field of the ApiMac_sAddr_t structure.
 */
typedef enum _ApiMacAddrType {
  /*
   *! Address not present 
   */
  API_MAC_ADDR_TYPE__ApiMac_addrType_none = 0,
  /*
   *! Short Address (16 bits) 
   */
  API_MAC_ADDR_TYPE__ApiMac_addrType_short = 2,
  /*
   *! Extended Address (64 bits) 
   */
  API_MAC_ADDR_TYPE__ApiMac_addrType_extended = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(API_MAC_ADDR_TYPE)
} ApiMacAddrType;
/*
 *! Beacon types in the ApiMac_mlmeBeaconNotifyInd_t structure. 
 */
typedef enum _ApiMacBeaconType {
  /*
   *! normal beacon type 
   */
  API_MAC_BEACON_TYPE__ApiMac_beaconType_normal = 0,
  /*
   *! enhanced beacon type 
   */
  API_MAC_BEACON_TYPE__ApiMac_beaconType_enhanced = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(API_MAC_BEACON_TYPE)
} ApiMacBeaconType;
/*
 *! Disassociate Reasons 
 */
typedef enum _ApiMacDisassociateReason {
  /*
   *! The coordinator wishes the device to disassociate 
   */
  API_MAC_DISASSOCIATE_REASON__ApiMac_disassocateReason_coord = 1,
  /*
   *! The device itself wishes to disassociate 
   */
  API_MAC_DISASSOCIATE_REASON__ApiMac_disassocateReason_device = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(API_MAC_DISASSOCIATE_REASON)
} ApiMacDisassociateReason;
/*
 *! Comm Status Indication Reasons 
 */
typedef enum _ApiMacCommStatusReason {
  /*
   *!
   *Reason for comm status indication was in response to an Associate Response
   */
  API_MAC_COMM_STATUS_REASON__ApiMac_commStatusReason_assocRsp = 0,
  /*
   *!
   *Reason for comm status indication was in response to an Orphan Response
   */
  API_MAC_COMM_STATUS_REASON__ApiMac_commStatusReason_orphanRsp = 1,
  /*
   *!
   *Reason for comm status indication was result of recieving a secure frame
   */
  API_MAC_COMM_STATUS_REASON__ApiMac_commStatusReason_rxSecure = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(API_MAC_COMM_STATUS_REASON)
} ApiMacCommStatusReason;
/*
 *! General MAC Status values 
 */
typedef enum _ApiMacStatus {
  /*
   *! Operation successful 
   */
  API_MAC_STATUS__ApiMac_status_success = 0,
  /*
   *! The AUTOPEND pending all is turned on 
   */
  API_MAC_STATUS__ApiMac_status_autoAckPendingAllOn = 254,
  /*
   *! The AUTOPEND pending all is turned off 
   */
  API_MAC_STATUS__ApiMac_status_autoAckPendingAllOff = 255,
  /*
   *! The beacon was lost following a synchronization request 
   */
  API_MAC_STATUS__ApiMac_status_beaconLoss = 224,
  /*
   *!
   *The operation or data request failed because of activity on the channel
   */
  API_MAC_STATUS__ApiMac_status_channelAccessFailure = 225,
  /*
   *!
   *The frame counter puportedly applied by the originator of the received
   *frame is invalid
   */
  API_MAC_STATUS__ApiMac_status_counterError = 219,
  /*
   *! The MAC was not able to enter low power mode 
   */
  API_MAC_STATUS__ApiMac_status_denied = 226,
  /*
   *! Unused 
   */
  API_MAC_STATUS__ApiMac_status_disabledTrxFailure = 227,
  /*
   *!
   *The received frame or frame resulting from an operation
   *or data request is too long to be processed by the MAC
   */
  API_MAC_STATUS__ApiMac_status_frameTooLong = 229,
  /*
   *!
   *The key purportedly applied by the originator of the
   *received frame is not allowed
   */
  API_MAC_STATUS__ApiMac_status_improperKeyType = 220,
  /*
   *!
   *The security level purportedly applied by the originator of
   *the received frame does not meet the minimum security level
   */
  API_MAC_STATUS__ApiMac_status_improperSecurityLevel = 221,
  /*
   *!
   *The data request failed because neither the source address nor
   *destination address parameters were present
   */
  API_MAC_STATUS__ApiMac_status_invalidAddress = 245,
  /*
   *! Unused 
   */
  API_MAC_STATUS__ApiMac_status_invalidGts = 230,
  /*
   *! The purge request contained an invalid handle 
   */
  API_MAC_STATUS__ApiMac_status_invalidHandle = 231,
  /*
   *! Unused 
   */
  API_MAC_STATUS__ApiMac_status_invalidIndex = 249,
  /*
   *! The API function parameter is out of range 
   */
  API_MAC_STATUS__ApiMac_status_invalidParameter = 232,
  /*
   *!
   *The scan terminated because the PAN descriptor storage limit
   *was reached
   */
  API_MAC_STATUS__ApiMac_status_limitReached = 250,
  /*
   *!
   *The operation or data request failed because no
   *acknowledgement was received
   */
  API_MAC_STATUS__ApiMac_status_noAck = 233,
  /*
   *!
   *The scan request failed because no beacons were received or the
   *orphan scan failed because no coordinator realignment was received
   */
  API_MAC_STATUS__ApiMac_status_noBeacon = 234,
  /*
   *!
   *The associate request failed because no associate response was received
   *or the poll request did not return any data
   */
  API_MAC_STATUS__ApiMac_status_noData = 235,
  /*
   *! The short address parameter of the start request was invalid 
   */
  API_MAC_STATUS__ApiMac_status_noShortAddress = 236,
  /*
   *! Unused 
   */
  API_MAC_STATUS__ApiMac_status_onTimeTooLong = 246,
  /*
   *! Unused 
   */
  API_MAC_STATUS__ApiMac_status_outOfCap = 237,
  /*
   *!
   *A PAN identifier conflict has been detected and
   *communicated to the PAN coordinator
   */
  API_MAC_STATUS__ApiMac_status_panIdConflict = 238,
  /*
   *! Unused 
   */
  API_MAC_STATUS__ApiMac_status_pastTime = 247,
  /*
   *! A set request was issued with a read-only identifier 
   */
  API_MAC_STATUS__ApiMac_status_readOnly = 251,
  /*
   *! A coordinator realignment command has been received 
   */
  API_MAC_STATUS__ApiMac_status_realignment = 239,
  /*
   *! The scan request failed because a scan is already in progress 
   */
  API_MAC_STATUS__ApiMac_status_scanInProgress = 252,
  /*
   *! Cryptographic processing of the received secure frame failed 
   */
  API_MAC_STATUS__ApiMac_status_securityError = 228,
  /*
   *! The beacon start time overlapped the coordinator transmission time 
   */
  API_MAC_STATUS__ApiMac_status_superframeOverlap = 253,
  /*
   *!
   *The start request failed because the device is not tracking
   *the beacon of its coordinator
   */
  API_MAC_STATUS__ApiMac_status_trackingOff = 248,
  /*
   *!
   *The associate response; disassociate request; or indirect
   *data transmission failed because the peer device did not respond
   *before the transaction expired or was purged
   */
  API_MAC_STATUS__ApiMac_status_transactionExpired = 240,
  /*
   *! The request failed because MAC data buffers are full 
   */
  API_MAC_STATUS__ApiMac_status_transactionOverflow = 241,
  /*
   *! Unused 
   */
  API_MAC_STATUS__ApiMac_status_txActive = 242,
  /*
   *!
   *The operation or data request failed because the
   *security key is not available
   */
  API_MAC_STATUS__ApiMac_status_unavailableKey = 243,
  /*
   *! The set or get request failed because the attribute is not supported 
   */
  API_MAC_STATUS__ApiMac_status_unsupportedAttribute = 244,
  /*
   *!
   *The received frame was secured with legacy security which is
   *not supported
   */
  API_MAC_STATUS__ApiMac_status_unsupportedLegacy = 222,
  /*
   *! The security of the received frame is not supported 
   */
  API_MAC_STATUS__ApiMac_status_unsupportedSecurity = 223,
  /*
   *! The operation is not supported in the current configuration 
   */
  API_MAC_STATUS__ApiMac_status_unsupported = 24,
  /*
   *! The operation could not be performed in the current state 
   */
  API_MAC_STATUS__ApiMac_status_badState = 25,
  /*
   *!
   *The operation could not be completed because no
   *memory resources were available
   */
  API_MAC_STATUS__ApiMac_status_noResources = 26,
  /*
   *! For internal use only 
   */
  API_MAC_STATUS__ApiMac_status_ackPending = 27,
  /*
   *! For internal use only 
   */
  API_MAC_STATUS__ApiMac_status_noTime = 28,
  /*
   *! For internal use only 
   */
  API_MAC_STATUS__ApiMac_status_txAborted = 29,
  /*
   *!
   *For internal use only - A duplicated entry is added to the source
   *matching table
   */
  API_MAC_STATUS__ApiMac_status_duplicateEntry = 30
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(API_MAC_STATUS)
} ApiMacStatus;
/*
 *! MAC Security Levels 
 */
typedef enum _ApiMacSecLevel {
  /*
   *! No security is used 
   */
  API_MAC_SEC_LEVEL__ApiMac_secLevel_none = 0,
  /*
   *! MIC-32 authentication is used 
   */
  API_MAC_SEC_LEVEL__ApiMac_secLevel_mic32 = 1,
  /*
   *! MIC-64 authentication is used 
   */
  API_MAC_SEC_LEVEL__ApiMac_secLevel_mic64 = 2,
  /*
   *! MIC-128 authentication is used 
   */
  API_MAC_SEC_LEVEL__ApiMac_secLevel_mic128 = 3,
  /*
   *! AES encryption is used 
   */
  API_MAC_SEC_LEVEL__ApiMac_secLevel_enc = 4,
  /*
   *! AES encryption and MIC-32 authentication are used 
   */
  API_MAC_SEC_LEVEL__ApiMac_secLevel_encMic32 = 5,
  /*
   *! AES encryption and MIC-64 authentication are used 
   */
  API_MAC_SEC_LEVEL__ApiMac_secLevel_encMic64 = 6,
  /*
   *! AES encryption and MIC-128 authentication are used 
   */
  API_MAC_SEC_LEVEL__ApiMac_secLevel_encMic128 = 7
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(API_MAC_SEC_LEVEL)
} ApiMacSecLevel;
/*
 *! Key Identifier Mode 
 */
typedef enum _ApiMacKeyIdMode {
  /*
   *! Key is determined implicitly 
   */
  API_MAC_KEY_ID_MODE__ApiMac_keyIdMode_implicit = 0,
  /*
   *! Key is determined from the 1-byte key index 
   */
  API_MAC_KEY_ID_MODE__ApiMac_keyIdMode_1 = 1,
  /*
   *! Key is determined from the 4-byte key index 
   */
  API_MAC_KEY_ID_MODE__ApiMac_keyIdMode_4 = 2,
  /*
   *! Key is determined from the 8-byte key index 
   */
  API_MAC_KEY_ID_MODE__ApiMac_keyIdMode_8 = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(API_MAC_KEY_ID_MODE)
} ApiMacKeyIdMode;
/*
 *! Standard PIB Get and Set Attributes - size bool 
 */
typedef enum _ApiMacAttributeBool {
  /*
   *! TRUE if a coordinator is currently allowing association 
   */
  API_MAC_ATTRIBUTE_BOOL__ApiMac_attribute_associatePermit = 65,
  /*
   *!
   *TRUE if a device automatically sends a data request if its address
   *is listed in the beacon frame
   */
  API_MAC_ATTRIBUTE_BOOL__ApiMac_attribute_autoRequest = 66,
  /*
   *! TRUE if battery life extension is enabled 
   */
  API_MAC_ATTRIBUTE_BOOL__ApiMac_attribute_battLifeExt = 67,
  /*
   *! TRUE if the PAN coordinator accepts GTS requests 
   */
  API_MAC_ATTRIBUTE_BOOL__ApiMac_attribute_gtsPermit = 77,
  /*
   *! TRUE if the MAC is in promiscuous mode 
   */
  API_MAC_ATTRIBUTE_BOOL__ApiMac_attribute_promiscuousMode = 81,
  /*
   *! TRUE if the MAC enables its receiver during idle periods 
   */
  API_MAC_ATTRIBUTE_BOOL__ApiMac_attribute_RxOnWhenIdle = 82,
  /*
   *! TRUE if the device is associated to the PAN coordinator 
   */
  API_MAC_ATTRIBUTE_BOOL__ApiMac_attribute_associatedPanCoord = 86,
  /*
   *! TRUE if the MAC supports RX and TX timestamps 
   */
  API_MAC_ATTRIBUTE_BOOL__ApiMac_attribute_timestampSupported = 92,
  /*
   *! TRUE if security is enabled 
   */
  API_MAC_ATTRIBUTE_BOOL__ApiMac_attribute_securityEnabled = 93,
  /*
   *! TRUE if MPM IE needs to be included 
   */
  API_MAC_ATTRIBUTE_BOOL__ApiMac_attribute_includeMPMIE = 98,
  /*
   *! FCS type 
   */
  API_MAC_ATTRIBUTE_BOOL__ApiMac_attribute_fcsType = 233
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(API_MAC_ATTRIBUTE_BOOL)
} ApiMacAttributeBool;
/*
 *! Standard PIB Get and Set Attributes - size uint8_t 
 */
typedef enum _ApiMacAttributeUint8 {
  /*
   *! The maximum number of symbols to wait for an acknowledgment frame 
   */
  API_MAC_ATTRIBUTE_UINT8__ApiMac_attribute_ackWaitDuration = 64,
  /*
   *!
   *The number of backoff periods during which the receiver is
   *enabled following a beacon in battery life extension mode
   */
  API_MAC_ATTRIBUTE_UINT8__ApiMac_attribute_battLifeExtPeriods = 68,
  /*
   *! The length in bytes of the beacon payload 
   */
  API_MAC_ATTRIBUTE_UINT8__ApiMac_attribute_beaconPayloadLength = 70,
  /*
   *! How often the coordinator transmits a beacon 
   */
  API_MAC_ATTRIBUTE_UINT8__ApiMac_attribute_beaconOrder = 71,
  /*
   *! The beacon sequence number 
   */
  API_MAC_ATTRIBUTE_UINT8__ApiMac_attribute_bsn = 73,
  /*
   *! The data or MAC command frame sequence number 
   */
  API_MAC_ATTRIBUTE_UINT8__ApiMac_attribute_dsn = 76,
  /*
   *!
   *The maximum number of backoffs the CSMA-CA algorithm will attempt
   *before declaring a channel failure
   */
  API_MAC_ATTRIBUTE_UINT8__ApiMac_attribute_maxCsmaBackoffs = 78,
  /*
   *!
   *The minimum value of the backoff exponent in the CSMA-CA algorithm.
   *If this value is set to 0, collision avoidance is disabled during
   *the first iteration of the algorithm. Also for the slotted version
   *of the CSMA-CA algorithm with the battery life extension enabled;
   *the minimum value of the backoff exponent will be at least 2
   */
  API_MAC_ATTRIBUTE_UINT8__ApiMac_attribute_backoffExponent = 79,
  /*
   *! This specifies the length of the active portion of the superframe 
   */
  API_MAC_ATTRIBUTE_UINT8__ApiMac_attribute_superframeOrder = 84,
  /*
   *! The maximum value of the backoff exponent in the CSMA-CA algorithm 
   */
  API_MAC_ATTRIBUTE_UINT8__ApiMac_attribute_maxBackoffExponent = 87,
  /*
   *! The maximum number of retries allowed after a transmission failure 
   */
  API_MAC_ATTRIBUTE_UINT8__ApiMac_attribute_maxFrameRetries = 89,
  /*
   *!
   *The maximum number of symbols a device shall wait for a response
   *command to be available following a request command in multiples
   *of aBaseSuperframeDuration
   */
  API_MAC_ATTRIBUTE_UINT8__ApiMac_attribute_responseWaitTime = 90,
  /*
   *! The timestamp offset from SFD in symbols 
   */
  API_MAC_ATTRIBUTE_UINT8__ApiMac_attribute_syncSymbolOffset = 91,
  /*
   *! Enhanced beacon sequence number 
   */
  API_MAC_ATTRIBUTE_UINT8__ApiMac_attribute_eBeaconSequenceNumber = 94,
  /*
   *! Enhanced beacon order in a beacon enabled network 
   */
  API_MAC_ATTRIBUTE_UINT8__ApiMac_attribute_eBeaconOrder = 95,
  /*
   *! Offset time slot from the beacon 
   */
  API_MAC_ATTRIBUTE_UINT8__ApiMac_attribute_offsetTimeslot = 97,
  /*
   *!
   *Duplicate transmit power attribute in signed
   *(2's complement) dBm unit
   */
  API_MAC_ATTRIBUTE_UINT8__ApiMac_attribute_phyTransmitPowerSigned = 224,
  /*
   *! The logical channel 
   */
  API_MAC_ATTRIBUTE_UINT8__ApiMac_attribute_logicalChannel = 225,
  /*
   *! alternate minimum backoff exponent 
   */
  API_MAC_ATTRIBUTE_UINT8__ApiMac_attribute_altBackoffExponent = 227,
  /*
   *! Device beacon order 
   */
  API_MAC_ATTRIBUTE_UINT8__ApiMac_attribute_deviceBeaconOrder = 228,
  /*
   *! valid values are true and false 
   */
  API_MAC_ATTRIBUTE_UINT8__ApiMac_attribute_rf4cePowerSavings = 229,
  /*
   *!
   *Currently supports 0 and 1.
   *If 0, frame Version is always 0 and set to 1 only for secure frames.
   *If 1, frame version will be set to 1 only if packet len > 102 or
   *for secure frames
   */
  API_MAC_ATTRIBUTE_UINT8__ApiMac_attribute_frameVersionSupport = 230,
  /*
   *! Channel Page 
   */
  API_MAC_ATTRIBUTE_UINT8__ApiMac_attribute_channelPage = 231,
  /*
   *!
   *PHY Descriptor ID, used to support channel page number and index into
   *descriptor table
   */
  API_MAC_ATTRIBUTE_UINT8__ApiMac_attribute_phyCurrentDescriptorId = 232
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(API_MAC_ATTRIBUTE_UINT8)
} ApiMacAttributeUint8;
/*
 *! Standard PIB Get and Set Attributes - size uint16_t 
 */
typedef enum _ApiMacAttributeUint16 {
  /*
   *!
   *The short address assigned to the coordinator with which the
   *device is associated.  A value of MAC_ADDR_USE_EXT indicates
   *that the coordinator is using its extended address
   */
  API_MAC_ATTRIBUTE_UINT16__ApiMac_attribute_coordShortAddress = 75,
  /*
   *!
   *The PAN identifier.  If this value is 0xffff, the device is
   *not associated
   */
  API_MAC_ATTRIBUTE_UINT16__ApiMac_attribute_panId = 80,
  /*
   *!
   *The short address that the device uses to communicate in the PAN.
   *If the device is a PAN coordinator, this value shall be set before
   *calling MAC_StartReq().  Otherwise the value is allocated during
   *association.  Value MAC_ADDR_USE_EXT indicates that the device is
   *associated but not using a short address
   */
  API_MAC_ATTRIBUTE_UINT16__ApiMac_attribute_shortAddress = 83,
  /*
   *!
   *The maximum time in beacon intervals that a transaction is stored by
   *a coordinator and indicated in the beacon
   */
  API_MAC_ATTRIBUTE_UINT16__ApiMac_attribute_transactionPersistenceTime = 85,
  /*
   *!
   *The maximum number of CAP symbols in a beacon-enabled PAN, or
   *symbols in a non beacon-enabled PAN, to wait for a frame intended
   *as a response to a data request frame
   */
  API_MAC_ATTRIBUTE_UINT16__ApiMac_attribute_maxFrameTotalWaitTime = 88,
  /*
   *! Enhanced beacon order in a non-beacon enabled network 
   */
  API_MAC_ATTRIBUTE_UINT16__ApiMac_attribute_eBeaconOrderNBPAN = 96
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(API_MAC_ATTRIBUTE_UINT16)
} ApiMacAttributeUint16;
/*
 *! Standard PIB Get and Set Attributes - size uint32_t 
 */
typedef enum _ApiMacAttributeUint32 {
  /*
   *!
   *The time the device transmitted its last beacon frame,
   *in backoff period units
   */
  API_MAC_ATTRIBUTE_UINT32__ApiMac_attribute_beaconTxTime = 72,
  /*
   *! Diagnostics PIB - Received CRC pass counter 
   */
  API_MAC_ATTRIBUTE_UINT32__ApiMac_attribute_diagRxCrcPass = 234,
  /*
   *! Diagnostics PIB - Received CRC fail counter 
   */
  API_MAC_ATTRIBUTE_UINT32__ApiMac_attribute_diagRxCrcFail = 235,
  /*
   *! Diagnostics PIB - Received broadcast counter 
   */
  API_MAC_ATTRIBUTE_UINT32__ApiMac_attribute_diagRxBroadcast = 236,
  /*
   *! Diagnostics PIB - Transmitted broadcast counter 
   */
  API_MAC_ATTRIBUTE_UINT32__ApiMac_attribute_diagTxBroadcast = 237,
  /*
   *! Diagnostics PIB - Received unicast counter 
   */
  API_MAC_ATTRIBUTE_UINT32__ApiMac_attribute_diagRxUnicast = 238,
  /*
   *! Diagnostics PIB - Transmitted unicast counter 
   */
  API_MAC_ATTRIBUTE_UINT32__ApiMac_attribute_diagTxUnicast = 239,
  /*
   *! Diagnostics PIB - Transmitted unicast retry counter 
   */
  API_MAC_ATTRIBUTE_UINT32__ApiMac_attribute_diagTxUnicastRetry = 240,
  /*
   *! Diagnostics PIB - Transmitted unicast fail counter 
   */
  API_MAC_ATTRIBUTE_UINT32__ApiMac_attribute_diagTxUnicastFail = 241
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(API_MAC_ATTRIBUTE_UINT32)
} ApiMacAttributeUint32;
/*
 *! Standard PIB Get and Set Attributes - these attributes are array of bytes 
 */
typedef enum _ApiMacAttributeArray {
  /*
   *! The contents of the beacon payload 
   */
  API_MAC_ATTRIBUTE_ARRAY__ApiMac_attribute_beaconPayload = 69,
  /*
   *!
   *The extended address of the coordinator with which the device
   *is associated
   */
  API_MAC_ATTRIBUTE_ARRAY__ApiMac_attribute_coordExtendedAddress = 74,
  /*
   *! The extended address of the device 
   */
  API_MAC_ATTRIBUTE_ARRAY__ApiMac_attribute_extendedAddress = 226
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(API_MAC_ATTRIBUTE_ARRAY)
} ApiMacAttributeArray;
/*
 *! Security PIB Get and Set Attributes - size uint8_t  
 */
typedef enum _ApiMacSecurityAttributeUint8 {
  /*
   *! The number of entries in macKeyTable 
   */
  API_MAC_SECURITY_ATTRIBUTE_UINT8__ApiMac_securityAttribute_keyTableEntries = 129,
  /*
   *! The number of entries in macDeviceTable 
   */
  API_MAC_SECURITY_ATTRIBUTE_UINT8__ApiMac_securityAttribute_deviceTableEntries = 130,
  /*
   *! The number of entries in macSecurityLevelTable 
   */
  API_MAC_SECURITY_ATTRIBUTE_UINT8__ApiMac_securityAttribute_securityLevelTableEntries = 131,
  /*
   *! The security level used for automatic data requests 
   */
  API_MAC_SECURITY_ATTRIBUTE_UINT8__ApiMac_securityAttribute_autoRequestSecurityLevel = 133,
  /*
   *!The key identifier mode used for automatic data requests 
   */
  API_MAC_SECURITY_ATTRIBUTE_UINT8__ApiMac_securityAttribute_autoRequestKeyIdMode = 134,
  /*
   *! The index of the key used for automatic data requests 
   */
  API_MAC_SECURITY_ATTRIBUTE_UINT8__ApiMac_securityAttribute_autoRequestKeyIndex = 136
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(API_MAC_SECURITY_ATTRIBUTE_UINT8)
} ApiMacSecurityAttributeUint8;
/*
 *! Security PIB Get and Set Attributes - size uint16_t  
 */
typedef enum _ApiMacSecurityAttributeUint16 {
  /*
   *!The 16-bit short address assigned to the PAN coordinator 
   */
  API_MAC_SECURITY_ATTRIBUTE_UINT16__ApiMac_securityAttribute_panCoordShortAddress = 139
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(API_MAC_SECURITY_ATTRIBUTE_UINT16)
} ApiMacSecurityAttributeUint16;
/*
 *! Security PIB Get and Set Attributes - array of bytes 
 */
typedef enum _ApiMacSecurityAttrbuteArray {
  /*
   *! The originator of the key used for automatic data requests 
   */
  API_MAC_SECURITY_ATTRBUTE_ARRAY__ApiMac_securityAttribute_autoRequestKeySource = 135,
  /*
   *! The originator of the default key used for key ID mode 0x01 
   */
  API_MAC_SECURITY_ATTRBUTE_ARRAY__ApiMac_securityAttribute_defaultKeySource = 137,
  /*
   *! The 64-bit address of the PAN coordinator 
   */
  API_MAC_SECURITY_ATTRBUTE_ARRAY__ApiMac_securityAttribute_panCoordExtendedAddress = 138
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(API_MAC_SECURITY_ATTRBUTE_ARRAY)
} ApiMacSecurityAttrbuteArray;
/*
 *! Security PIB Get and Set Attributes - these attributes are structures 
 */
typedef enum _ApiMacSecurityAttributeStruct {
  /*
   *!
   *A table of KeyDescriptor, entries, each containing keys and related
   *information required for secured communications.  This is a SET only
   *attribute.  Call ApiMac_mlmeSetSecurityReqStruct() with pValue set to
   *ApiMac_keyDescriptor_t to set up the key table, if you set pValue
   *to NULL, the MAC will build the table.
   */
  API_MAC_SECURITY_ATTRIBUTE_STRUCT__ApiMac_securityAttribute_keyTable = 113,
  /*
   *!
   *A table of Device-Descriptor entries, each indicating a remote device
   *with which this device securely communicates. This is a SET only
   *attribute.  Call ApiMac_mlmeSetSecurityReqStruct() with pValue set to
   *ApiMac_securityDeviceDescriptor_t to set up the device table.
   */
  API_MAC_SECURITY_ATTRIBUTE_STRUCT__ApiMac_securityAttribute_deviceTable = 114,
  /*
   *!
   *A table of SecurityLevel-Descriptor entries, each with information
   *about the minimum security level expected depending on incoming frame
   *type and subtype. This is a SET only
   *attribute.  Call ApiMac_mlmeSetSecurityReqStruct() with pValue set to
   *ApiMac_securityLevelDescriptor_t to set up the security level table.
   */
  API_MAC_SECURITY_ATTRIBUTE_STRUCT__ApiMac_securityAttribute_securityLevelTable = 115,
  /*
   *!
   *The key lookup table entry, part of an entry of the key table.
   *To GET or SET to this attribute, setup the keyIndex and keyIdLookupIndex
   *fields of ApiMac_securityPibKeyIdLookupEntry_t, call
   *ApiMac_mlmeGetSecurityReqStruct() or ApiMac_mlmeSetSecurityReqStruct()
   *with a pointer to the ApiMac_securityPibKeyIdLookupEntry_t structure.
   *For the GET, the lookupEntry field will contain the required data.
   */
  API_MAC_SECURITY_ATTRIBUTE_STRUCT__ApiMac_securityAttribute_keyIdLookupEntry = 208,
  /*
   *!
   *The key device entry, part of an entry of the key table.
   *To GET or SET to this attribute, setup the keyIndex and keyDeviceIndex
   *fields of ApiMac_securityPibKeyDeviceEntry_t, call
   *ApiMac_mlmeGetSecurityReqStruct() or ApiMac_mlmeSetSecurityReqStruct()
   *with a pointer to the ApiMac_securityPibKeyDeviceEntry_t structure.
   *For the GET, the deviceEntry field will contain the required data.
   */
  API_MAC_SECURITY_ATTRIBUTE_STRUCT__ApiMac_securityAttribute_keyDeviceEntry = 209,
  /*
   *!
   *The key usage entry, part of an entry of the key table.
   *To GET or SET to this attribute, setup the keyIndex and keyUsageIndex
   *fields of ApiMac_securityPibKeyUsageEntry_t, call
   *ApiMac_mlmeGetSecurityReqStruct() or ApiMac_mlmeSetSecurityReqStruct()
   *with a pointer to the ApiMac_securityPibKeyUsageEntry_t structure.
   *For the GET, the usageEntry field will contain the required data.
   */
  API_MAC_SECURITY_ATTRIBUTE_STRUCT__ApiMac_securityAttribute_keyUsageEntry = 210,
  /*
   *!
   *The MAC key entry, an entry of the key table.
   *To GET or SET to this attribute, setup the keyIndex
   *field of ApiMac_securityPibKeyEntry_t, call
   *ApiMac_mlmeGetSecurityReqStruct() or ApiMac_mlmeSetSecurityReqStruct()
   *with a pointer to the ApiMac_securityPibKeyEntry_t structure.
   *For the GET, the rest of the fields will contain the required data.
   */
  API_MAC_SECURITY_ATTRIBUTE_STRUCT__ApiMac_securityAttribute_keyEntry = 211,
  /*
   *!
   *The MAC device entry, an entry of the device table.
   *To GET or SET to this attribute, setup the deviceIndex
   *field of ApiMac_securityPibDeviceEntry_t, call
   *ApiMac_mlmeGetSecurityReqStruct() or ApiMac_mlmeSetSecurityReqStruct()
   *with a pointer to the ApiMac_securityPibDeviceEntry_t structure.
   *For the GET, the deviceEntry field will contain the required data.
   */
  /*
   *! The MAC security level entry, an entry of the security level table 
   */
  API_MAC_SECURITY_ATTRIBUTE_STRUCT__ApiMac_securityAttribute_deviceEntry = 212,
  /*
   *!
   *The MAC security level entry, an entry of the security level table.
   *To GET or SET to this attribute, setup the levelIndex
   *field of ApiMac_securityPibSecurityLevelEntry_t, call
   *ApiMac_mlmeGetSecurityReqStruct() or ApiMac_mlmeSetSecurityReqStruct()
   *with a pointer to the ApiMac_securityPibSecurityLevelEntry_t structure.
   *For the GET, the levelEntry field will contain the required data.
   */
  API_MAC_SECURITY_ATTRIBUTE_STRUCT__ApiMac_securityAttribute_securityLevelEntry = 213
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(API_MAC_SECURITY_ATTRIBUTE_STRUCT)
} ApiMacSecurityAttributeStruct;
/*
 *! Frequency Hopping PIB Get and Set Attributes - size uint8_t 
 */
typedef enum _ApiMacFHAttributeUint8 {
  /*
   *! Duration of node's unicast slot (in milliseconds) - uint8_t 
   */
  API_MAC__FHATTRIBUTE_UINT8__ApiMac_FHAttribute_unicastDwellInterval = 8196,
  /*
   *! Duration of node's broadcast slot (in milliseconds) - uint8_t 
   */
  API_MAC__FHATTRIBUTE_UINT8__ApiMac_FHAttribute_broadcastDwellInterval = 8197,
  /*
   *! Clock drift in PPM - uint8_t 
   */
  API_MAC__FHATTRIBUTE_UINT8__ApiMac_FHAttribute_clockDrift = 8198,
  /*
   *! Timing accuracy in 10 microsecond resolution - uint8_t 
   */
  API_MAC__FHATTRIBUTE_UINT8__ApiMac_FHAttribute_timingAccuracy = 8199,
  /*
   *! Unicast channel hopping function - uint8_t 
   */
  API_MAC__FHATTRIBUTE_UINT8__ApiMac_FHAttribute_unicastChannelFunction = 8200,
  /*
   *! Broadcast channel hopping function - uint8_t 
   */
  API_MAC__FHATTRIBUTE_UINT8__ApiMac_FHAttribute_broadcastChannelFunction = 8201,
  /*
   *! Node is propagating parent's BS-IE - uint8_t 
   */
  API_MAC__FHATTRIBUTE_UINT8__ApiMac_FHAttribute_useParentBSIE = 8202,
  /*
   *! Estimate of routing path ETX to the PAN coordinator - uint8_t 
   */
  API_MAC__FHATTRIBUTE_UINT8__ApiMac_FHAttribute_routingCost = 8207,
  /*
   *! RPL(1), MHDS(0) - uint8_t 
   */
  API_MAC__FHATTRIBUTE_UINT8__ApiMac_FHAttribute_routingMethod = 8208,
  /*
   *! Node can accept EAPOL message - uint8_t 
   */
  API_MAC__FHATTRIBUTE_UINT8__ApiMac_FHAttribute_eapolReady = 8209,
  /*
   *! Wi-SUN FAN version - uint8_t 
   */
  API_MAC__FHATTRIBUTE_UINT8__ApiMac_FHAttribute_fanTPSVersion = 8210,
  /*
   *!
   *Low order 64 bits of SHA256 hash of GTK
   *- APIMAC_FH_NET_NAME_SIZE_MAX uint8_t
   */
  API_MAC__FHATTRIBUTE_UINT8__ApiMac_FHAttribute_gtk0Hash = 8213,
  /*
   *!
   *Next low order 64 bits of SHA256 hash of GTK
   *- APIMAC_FH_NET_NAME_SIZE_MAX uint8_t
   */
  API_MAC__FHATTRIBUTE_UINT8__ApiMac_FHAttribute_gtk1Hash = 8214,
  /*
   *!
   *Next low order 64 bits of SHA256 hash of GTK
   *- APIMAC_FH_NET_NAME_SIZE_MAX uint8_t
   */
  API_MAC__FHATTRIBUTE_UINT8__ApiMac_FHAttribute_gtk2Hash = 8215,
  /*
   *!
   *Next low order 64 bits of SHA256 hash of GTK
   *- APIMAC_FH_NET_NAME_SIZE_MAX uint8_t
   */
  API_MAC__FHATTRIBUTE_UINT8__ApiMac_FHAttribute_gtk3Hash = 8216
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(API_MAC__FHATTRIBUTE_UINT8)
} ApiMacFHAttributeUint8;
/*
 *! Frequency Hopping PIB Get and Set Attributes - size uint16_t 
 */
typedef enum _ApiMacFHAttributeUint16 {
  /*
   *!
   *Broadcast schedule ID for broadcast channel hopping sequence - uint16_t
   */
  API_MAC__FHATTRIBUTE_UINT16__ApiMac_FHAttribute_broadcastSchedId = 8203,
  /*
   *! Unicast channel number when no hopping - uint16_t 
   */
  API_MAC__FHATTRIBUTE_UINT16__ApiMac_FHAttribute_unicastFixedChannel = 8204,
  /*
   *! Broadcast channel number when no hopping - uint16_t 
   */
  API_MAC__FHATTRIBUTE_UINT16__ApiMac_FHAttribute_broadcastFixedChannel = 8205,
  /*
   *! Number of nodes in the PAN - uint16_t 
   */
  API_MAC__FHATTRIBUTE_UINT16__ApiMac_FHAttribute_panSize = 8206,
  /*
   *! PAN version to notify PAN configuration changes - uint16_t 
   */
  API_MAC__FHATTRIBUTE_UINT16__ApiMac_FHAttribute_panVersion = 8212,
  /*
   *! Time in min during which the node info considered as valid - uint16_t 
   */
  API_MAC__FHATTRIBUTE_UINT16__ApiMac_FHAttribute_neighborValidTime = 8217
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(API_MAC__FHATTRIBUTE_UINT16)
} ApiMacFHAttributeUint16;
/*
 *! Frequency Hopping PIB Get and Set Attributes - size uint32_t 
 */
typedef enum _ApiMacFHAttributeUint32 {
  /*
   *!
   *Time between start of two broadcast slots (in milliseconds) - uint32_t
   */
  API_MAC__FHATTRIBUTE_UINT32__ApiMac_FHAttribute_BCInternal = 8193
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(API_MAC__FHATTRIBUTE_UINT32)
} ApiMacFHAttributeUint32;
/*
 *! Frequency Hopping PIB Get and Set Attributes - array of bytes 
 */
typedef enum _ApiMacFHAttriibuteArray {
  /*
   *! The parent EUI address - ApiMac_sAddrExt_t 
   */
  API_MAC__FHATTRIIBUTE_ARRAY__ApiMac_FHAttribute_trackParentEUI = 8192,
  /*
   *! Unicast excluded channels - APIMAC_FH_MAX_BIT_MAP_SIZE 
   */
  API_MAC__FHATTRIIBUTE_ARRAY__ApiMac_FHAttribute_unicastExcludedChannels = 8194,
  /*
   *! Broadcast excluded channels - APIMAC_FH_MAX_BIT_MAP_SIZE 
   */
  API_MAC__FHATTRIIBUTE_ARRAY__ApiMac_FHAttribute_broadcastExcludedChannels = 8195,
  /*
   *! Network Name - APIMAC_FH_NET_NAME_SIZE_MAX uint8_t 
   */
  API_MAC__FHATTRIIBUTE_ARRAY__ApiMac_FHAttribute_netName = 8211
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(API_MAC__FHATTRIIBUTE_ARRAY)
} ApiMacFHAttriibuteArray;
/*
 *! FH Frame Types 
 */
typedef enum _ApiMacFhFrameType {
  /*
   *! WiSUN PAN advertisement 
   */
  API_MAC_FH_FRAME_TYPE__ApiMac_fhFrameType_panAdvert = 0,
  /*
   *! WiSUN PAN advertisement solicit 
   */
  API_MAC_FH_FRAME_TYPE__ApiMac_fhFrameType_panAdvertSolicit = 1,
  /*
   *! WiSUN PAN config 
   */
  API_MAC_FH_FRAME_TYPE__ApiMac_fhFrameType_config = 2,
  /*
   *! WiSUN PAN config solicit 
   */
  API_MAC_FH_FRAME_TYPE__ApiMac_fhFrameType_configSolicit = 3,
  /*
   *! WiSUN Data frame 
   */
  API_MAC_FH_FRAME_TYPE__ApiMac_fhFrameType_data = 4,
  /*
   *! WiSUN Ack frame 
   */
  API_MAC_FH_FRAME_TYPE__ApiMac_fhFrameType_ack = 5,
  /*
   *! WiSUN Ack frame 
   */
  API_MAC_FH_FRAME_TYPE__ApiMac_fhFrameType_eapol = 6,
  /*
   *! Internal: WiSUN Invalid frame 
   */
  API_MAC_FH_FRAME_TYPE__ApiMac_fhFrameType_invalid = 255
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(API_MAC_FH_FRAME_TYPE)
} ApiMacFhFrameType;
/*
 *! Payload IE Group IDs 
 */
typedef enum _ApiMacPayloadIEGroup {
  /*
   *! Payload ESDU IE Group ID 
   */
  API_MAC_PAYLOAD_IEGROUP__ApiMac_payloadIEGroup_ESDU = 0,
  /*
   *! Payload MLME IE Group ID 
   */
  API_MAC_PAYLOAD_IEGROUP__ApiMac_payloadIEGroup_MLME = 1,
  /*
   *! Payload WiSUN IE Group ID 
   */
  API_MAC_PAYLOAD_IEGROUP__ApiMac_payloadIEGroup_WiSUN = 4,
  /*
   *! Payload Termination IE Group ID 
   */
  API_MAC_PAYLOAD_IEGROUP__ApiMac_payloadIEGroup_term = 15
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(API_MAC_PAYLOAD_IEGROUP)
} ApiMacPayloadIEGroup;
/*
 *! MLME Sub IEs 
 */
typedef enum _ApiMacMLMESubIE {
  /*
   *! MLME Sub IEs - short format - Coexistence IE 
   */
  API_MAC__MLMESUB_IE__ApiMac_MLMESubIE_coexist = 33,
  /*
   *! MLME Sub IEs - short format - SUN Device capabilities IE 
   */
  API_MAC__MLMESUB_IE__ApiMac_MLMESubIE_sunDevCap = 34,
  /*
   *! MLME Sub IEs - short format - SUN FSK Generic PHY IE 
   */
  API_MAC__MLMESUB_IE__ApiMac_MLMESubIE_sunFSKGenPhy = 35
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(API_MAC__MLMESUB_IE)
} ApiMacMLMESubIE;
/*
 *! WiSUN Sub IEs 
 */
typedef enum _ApiMacWisUNSubIE {
  /*
   *! WiSUN Sub IE - Long format - Unicast Schedule IE 
   */
  API_MAC_WIS_UNSUB_IE__ApiMac_wisunSubIE_USIE = 1,
  /*
   *! WiSUN Sub IE - Long format - Broadcast Schedule IE 
   */
  API_MAC_WIS_UNSUB_IE__ApiMac_wisunSubIE_BSIE = 2,
  /*
   *! WiSUN Sub IE - Short format - PAN IE 
   */
  API_MAC_WIS_UNSUB_IE__ApiMac_wisunSubIE_PANIE = 4,
  /*
   *! WiSUN Sub IE - Short format - Network Name IE 
   */
  API_MAC_WIS_UNSUB_IE__ApiMac_wisunSubIE_netNameIE = 5,
  /*
   *! WiSUN Sub IE - Short format - PAN Version IE 
   */
  API_MAC_WIS_UNSUB_IE__ApiMac_wisunSubIE_PANVersionIE = 6,
  /*
   *! WiSUN Sub IE - Short format - GTK Hash IE 
   */
  API_MAC_WIS_UNSUB_IE__ApiMac_wisunSubIE_GTKHashIE = 7
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(API_MAC_WIS_UNSUB_IE)
} ApiMacWisUNSubIE;
/*
 *! Scan Types 
 */
typedef enum _ApiMacScanType {
  /*
   *!
   *Energy detect scan.  The device will tune to each channel and
   *perform and energy measurement.  The list of channels and their
   *associated measurements will be returned at the end of the scan
   */
  API_MAC_SCAN_TYPE__ApiMac_scantype_energyDetect = 0,
  /*
   *!
   *Active scan.  The device tunes to each channel, sends a beacon
   *request and listens for beacons.  The PAN descriptors are returned
   *at the end of the scan
   */
  API_MAC_SCAN_TYPE__ApiMac_scantype_active = 1,
  /*
   *!
   *Passive scan.  The device tunes to each channel and listens for
   *beacons.  The PAN descriptors are returned at the end of the scan
   */
  API_MAC_SCAN_TYPE__ApiMac_scantype_passive = 2,
  /*
   *!
   *Orphan scan.  The device tunes to each channel and sends an orphan
   *notification to try and find its coordinator.  The status is returned
   *at the end of the scan
   */
  API_MAC_SCAN_TYPE__ApiMac_scantype_orphan = 3,
  /*
   *!
   *Enhanced Active scan. In addition to Active scan, this command is also
   *used by a device to locate a subset of all coordinators within its
   *POS during an active scan
   */
  API_MAC_SCAN_TYPE__ApiMac_scantype_activeEnhanced = 5
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(API_MAC_SCAN_TYPE)
} ApiMacScanType;
/*
 *! WiSUN Async Operations 
 */
typedef enum _ApiMacWisunAsyncOperation {
  /*
   *! Start Async 
   */
  API_MAC_WISUN_ASYNC_OPERATION__ApiMac_wisunAsycnOperation_start = 0,
  /*
   *! Stop Async 
   */
  API_MAC_WISUN_ASYNC_OPERATION__ApiMac_wisunAsycnOperation_stop = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(API_MAC_WISUN_ASYNC_OPERATION)
} ApiMacWisunAsyncOperation;
/*
 *! WiSUN Async Frame Types 
 */
typedef enum _ApiMacWisunAsyncFrame {
  /*
   *! WiSUN Async PAN Advertisement Frame type 
   */
  API_MAC_WISUN_ASYNC_FRAME__ApiMac_wisunAsyncFrame_advertisement = 1,
  /*
   *! WiSUN Async PAN Advertisement Solicitation Frame type 
   */
  API_MAC_WISUN_ASYNC_FRAME__ApiMac_wisunAsyncFrame_advertisementSolicit = 2,
  /*
   *! WiSUN Async PAN Configuration Frame type 
   */
  API_MAC_WISUN_ASYNC_FRAME__ApiMac_wisunAsyncFrame_config = 3,
  /*
   *! WiSUN Async PAN Configuration Solicitation Frame type 
   */
  API_MAC_WISUN_ASYNC_FRAME__ApiMac_wisunAsyncFrame_configSolicit = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(API_MAC_WISUN_ASYNC_FRAME)
} ApiMacWisunAsyncFrame;
/*
 *! Freqency Hopping Dispatch Values 
 */
typedef enum _ApiMacFhDispatchType {
  /*
   *! No protocol dispatch 
   */
  API_MAC_FH_DISPATCH_TYPE__ApiMac_fhDispatchType_none = 0,
  /*
   *! MHD-PDU protocol dispatch 
   */
  API_MAC_FH_DISPATCH_TYPE__ApiMac_fhDispatchType_MHD_PDU = 1,
  /*
   *! 6LowPAN protocol dispatch 
   */
  API_MAC_FH_DISPATCH_TYPE__ApiMac_fhDispatchType_6LowPAN = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(API_MAC_FH_DISPATCH_TYPE)
} ApiMacFhDispatchType;

/* --- messages --- */

/*
 *! MAC address type field structure 
 */
struct  _ApiMacSAddr
{
  ProtobufCMessage base;
  /*
   *!
   *The address can be either a long address or a short address depending
   *the addrMode field.
   */
  ApiMacAddrType addrmode;
  /*
   *! 16 bit address 
   */
  uint32_t shortaddr;
  /*
   *! Extended address 
   */
  uint64_t extaddr;
};
#define API_MAC_S_ADDR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&api_mac_s_addr__descriptor) \
    , 0, 0, 0 }


/*
 *! Data buffer structure 
 */
struct  _ApiMacSData
{
  ProtobufCMessage base;
  /*
   *! length of the data buffer 
   */
  uint32_t len;
  /*
   *! pointer to the data buffer 
   */
  ProtobufCBinaryData p;
};
#define API_MAC_S_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&api_mac_s_data__descriptor) \
    , 0, {0,NULL} }


/*
 *!
 *Generic PHY Descriptor.
 *We are using this structure for both Channel Page 9 and Channel Page 10.
 */
struct  _ApiMacMRFSKPHYDesc
{
  ProtobufCMessage base;
  /*
   *! First Channel Center frequency 
   */
  uint32_t firstchcentrfreq;
  /*
   *! Number of channels defined for the particular PHY mode 
   */
  uint32_t numchannels;
  /*
   *! Distance between Adjacent center channel frequencies 
   */
  uint32_t channelspacing;
  /*
   *! 2-FSK/2-GFSK/4-FSK/4-GFSK 
   */
  uint32_t fskmodscheme;
  /*
   *! Symbol rate selection 
   */
  uint32_t symbolrate;
  /*
   *!
   *Modulation index as a value encoded in
   *MR-FSK Generic PHY Descriptor IE
   *(IEEE802.15.4g section 5.2.4.20c).
   *<BR>
   *2FSK MI = 0.25 + Modulation Index * 0.05
   *<BR>
   *4FSK MI is a third of 2FSK MI
   */
  uint32_t fskmodindex;
  /*
   *! Channel clearance algorithm selection 
   */
  uint32_t ccatype;
};
#define API_MAC__MRFSKPHYDESC__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&api_mac__mrfskphydesc__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0 }


/*
 *! Common security type 
 */
struct  _ApiMacSec
{
  ProtobufCMessage base;
  /*
   *! Key source 
   */
  uint64_t keysource;
  /*
   *! Security Level 
   */
  uint32_t securitylevel;
  /*
   *! Key identifier mode 
   */
  uint32_t keyidmode;
  /*
   *! Key index 
   */
  uint32_t keyindex;
};
#define API_MAC_SEC__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&api_mac_sec__descriptor) \
    , 0, 0, 0, 0 }


/*
 *! Key ID Lookup Descriptor 
 */
struct  _ApiMacKeyIdLookupDescriptor
{
  ProtobufCMessage base;
  /*
   *! Data used to identify the key 
   */
  ProtobufCBinaryData lookupdata;
  /*
   *! 0x00 indicates 5 octets; 0x01 indicates 9 octets 
   */
  uint32_t lookupdatasize;
};
#define API_MAC_KEY_ID_LOOKUP_DESCRIPTOR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&api_mac_key_id_lookup_descriptor__descriptor) \
    , {0,NULL}, 0 }


/*
 *! Key Device Descriptor 
 */
struct  _ApiMacKeyDeviceDescriptor
{
  ProtobufCMessage base;
  /*
   *! Handle to the DeviceDescriptor 
   */
  uint32_t devicedescriptorhandle;
  /*
   *! True if the device is unique 
   */
  uint32_t uniquedevice;
  /*
   *! This key exhausted the frame counter. 
   */
  uint32_t blacklisted;
};
#define API_MAC_KEY_DEVICE_DESCRIPTOR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&api_mac_key_device_descriptor__descriptor) \
    , 0, 0, 0 }


/*
 *! Key Usage Descriptor 
 */
struct  _ApiMacKeyUsageDescriptor
{
  ProtobufCMessage base;
  /*
   *! Frame Type 
   */
  uint32_t frametype;
  /*
   *! Command Frame Identifier 
   */
  uint32_t cmdframeid;
};
#define API_MAC_KEY_USAGE_DESCRIPTOR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&api_mac_key_usage_descriptor__descriptor) \
    , 0, 0 }


/*
 *! Key Descriptor 
 */
struct  _ApiMacKeyDescriptor
{
  ProtobufCMessage base;
  /*
   *! A list identifying this KeyDescriptor 
   */
  ApiMacKeyIdLookupDescriptor *keyidlookuplist;
  /*
   *!
   *A list indicating which devices are currently using this key, including
   *their blacklist status.
   */
  /*
   *! The number of entries in KeyDeviceList 
   */
  size_t n_keydevicelist;
  ApiMacKeyDeviceDescriptor **keydevicelist;
  /*
   *! A list indicating which frame types this key may be used with. 
   */
  /*
   *! The number of entries in KeyUsageList 
   */
  size_t n_keyusagelist;
  ApiMacKeyUsageDescriptor **keyusagelist;
  /*
   *! The actual value of the key 
   */
  /*
   * array length: [APIMAC_KEY_MAX_LEN] 
   */
  ProtobufCBinaryData key;
  /*
   *!
   *PIB frame counter in 802.15.4 is universal across key,
   *but it makes more sense to associate a frame counter
   *with a key.
   */
  uint32_t framecounter;
};
#define API_MAC_KEY_DESCRIPTOR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&api_mac_key_descriptor__descriptor) \
    , NULL, 0,NULL, 0,NULL, {0,NULL}, 0 }


/*
 *! Device Descriptor 
 */
struct  _ApiMacDeviceDescriptor
{
  ProtobufCMessage base;
  /*
   *! The 16-bit PAN identifier of the device 
   */
  uint32_t panid;
  /*
   *! The 16-bit short address of the device 
   */
  /*
   *!
   *The 64-bit IEEE extended address of the device. This element is also
   *used inunsecuring operations on incoming frames.
   */
  uint32_t shortaddress;
  /*
   * required fixed64 extAddress = 3;
   */
  int64_t extaddress;
};
#define API_MAC_DEVICE_DESCRIPTOR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&api_mac_device_descriptor__descriptor) \
    , 0, 0, 0 }


/*
 *! Security Level Descriptor 
 */
struct  _ApiMacSecurityLevelDescriptor
{
  ProtobufCMessage base;
  /*
   *! Frame Type 
   */
  uint32_t frametype;
  /*
   *! Command Frame ID 
   */
  uint32_t commandframeidentifier;
  /*
   *!
   *The minimal required/expected security level for incoming MAC frames.
   */
  uint32_t securityminimum;
  /*
   *!
   *Indication of whether originating devices for which the Exempt flag is
   *set may override the minimum security level indicated by the Security
   *Minimum element. If TRUE, this indicates that for originating devices
   *with Exempt status, the incoming security level zero is acceptable.
   */
  uint32_t securityoverridesecurityminimum;
};
#define API_MAC_SECURITY_LEVEL_DESCRIPTOR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&api_mac_security_level_descriptor__descriptor) \
    , 0, 0, 0, 0 }


/*
 *! Security Device Descriptor 
 */
struct  _ApiMacSecurityDeviceDescriptor
{
  ProtobufCMessage base;
  /*
   *! Device information 
   */
  ApiMacDeviceDescriptor *devinfo;
  /*
   *!
   *The incoming frame counter of the device. This value is used to
   *ensure sequential freshness of frames.
   */
  /*
   * array: [APIMAC_MAX_KEY_TABLE_ENTRIES]; 
   */
  size_t n_framecounter;
  uint32_t *framecounter;
  /*
   *! Device may override the minimum security level settings. 
   */
  uint32_t exempt;
};
#define API_MAC_SECURITY_DEVICE_DESCRIPTOR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&api_mac_security_device_descriptor__descriptor) \
    , NULL, 0,NULL, 0 }


/*
 *! MAC key entry structure 
 */
struct  _ApiMacSecurityKeyEntry
{
  ProtobufCMessage base;
  /*
   *! The 128-bit key 
   */
  /*
   * array[APIMAC_KEY_MAX_LEN]; 
   */
  ProtobufCBinaryData keyentry;
  /*
   *! the key's index - unique 
   */
  uint32_t keyindex;
  /*
   *! The key's frame counter 
   */
  uint32_t framecounter;
};
#define API_MAC_SECURITY_KEY_ENTRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&api_mac_security_key_entry__descriptor) \
    , {0,NULL}, 0, 0 }


/*
 *!
 *Security PIB Key ID lookup entry for a Get/Set
 *ApiMac_securityAttribute_keyIdLookupEntry
 */
struct  _ApiMacSecurityPibKeyIdLookupEntry
{
  ProtobufCMessage base;
  /*
   *! index into the macKeyIdLookupList 
   */
  uint32_t keyindex;
  /*
   *! index into macKeyIdLookupList[keyIndex] 
   */
  uint32_t keyidlookupindex;
  /*
   *! Place to put the requested data 
   */
  ApiMacKeyIdLookupDescriptor *lookupentry;
};
#define API_MAC_SECURITY_PIB_KEY_ID_LOOKUP_ENTRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&api_mac_security_pib_key_id_lookup_entry__descriptor) \
    , 0, 0, NULL }


/*
 *!
 *Security PIB Key ID device entry for a Get/Set
 *ApiMac_securityAttribute_keyDeviceEntry
 */
struct  _ApiMacSecurityPibKeyDeviceEntry
{
  ProtobufCMessage base;
  /*
   *! index into the macKeyDeviceList 
   */
  uint32_t keyindex;
  /*
   *! index into macKeyDeviceList[keyIndex] 
   */
  uint32_t keydeviceindex;
  /*
   *! Place to put the requested data 
   */
  ApiMacKeyDeviceDescriptor *deviceentry;
};
#define API_MAC_SECURITY_PIB_KEY_DEVICE_ENTRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&api_mac_security_pib_key_device_entry__descriptor) \
    , 0, 0, NULL }


/*
 *!
 *Security PIB Key ID usage entry for a Get/Set
 *ApiMac_securityAttribute_keyUsageEntry
 */
struct  _ApiMacSecurityPibKeyUsageEnttry
{
  ProtobufCMessage base;
  /*
   *! index into the macKeyUsageList 
   */
  uint32_t keyindex;
  /*
   *! index into macKeyUsageList[keyIndex] 
   */
  uint32_t keyusageindex;
  /*
   *! Place to put the requested data 
   */
  ApiMacKeyUsageDescriptor *usageentry;
};
#define API_MAC_SECURITY_PIB_KEY_USAGE_ENTTRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&api_mac_security_pib_key_usage_enttry__descriptor) \
    , 0, 0, NULL }


/*
 *!
 *Security PIB Key entry for a Get/Set
 *ApiMac_securityAttribute_keyEntry
 */
struct  _ApiMacSecurityPibKeyEntry
{
  ProtobufCMessage base;
  /*
   *! index into the macKeyTable 
   */
  uint32_t keyindex;
  /*
   *! key entry 
   */
  /*
   * array: [APIMAC_KEY_MAX_LEN]; 
   */
  ProtobufCBinaryData keyentry;
  /*
   *! frame counter 
   */
  uint32_t framecounter;
};
#define API_MAC_SECURITY_PIB_KEY_ENTRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&api_mac_security_pib_key_entry__descriptor) \
    , 0, {0,NULL}, 0 }


/*
 *!
 *Security PIB device entry for a Get/Set
 *ApiMac_securityAttribute_deviceEntry
 */
struct  _ApiMacSecurityPibDeviceEntry
{
  ProtobufCMessage base;
  /*
   *! index into the macDeviceTable 
   */
  uint32_t deviceindex;
  /*
   *! Place to put the requested data 
   */
  ApiMacSecurityDeviceDescriptor *deviceentry;
};
#define API_MAC_SECURITY_PIB_DEVICE_ENTRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&api_mac_security_pib_device_entry__descriptor) \
    , 0, NULL }


/*
 *!
 *Security PIB level entry for a Get/Set
 *ApiMac_securityAttribute_securityLevelEntry
 */
struct  _ApiMacSecurityPibSecurityLevelEntry
{
  ProtobufCMessage base;
  /*
   *! index into the macSecurityLevelTable 
   */
  uint32_t levelindex;
  /*
   *! Place to put the requested data 
   */
  ApiMacSecurityLevelDescriptor *levelentry;
};
#define API_MAC_SECURITY_PIB_SECURITY_LEVEL_ENTRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&api_mac_security_pib_security_level_entry__descriptor) \
    , 0, NULL }


/*
 *! Structure defines the Capabilities Information bit field. 
 */
struct  _ApiMacCapabilityInfo
{
  ProtobufCMessage base;
  /*
   *! True if the device is a PAN Coordinator 
   */
  uint32_t pancoord;
  /*
   *! True if the device is a full function device (FFD) 
   */
  uint32_t ffd;
  /*
   *! True if the device is mains powered 
   */
  uint32_t mainspower;
  /*
   *! True if the device's RX is on when the device is idle 
   */
  uint32_t rxonwhenidle;
  /*
   *! True if the device is capable of sending and receiving secured frames
   */
  uint32_t security;
  /*
   *!
   *True if allocation of a short address in the associate procedure
   *is needed.
   */
  uint32_t allocaddr;
};
#define API_MAC_CAPABILITY_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&api_mac_capability_info__descriptor) \
    , 0, 0, 0, 0, 0, 0 }


/*
 *! Data Request Transmit Options 
 */
struct  _ApiMacTxOptions
{
  ProtobufCMessage base;
  /*
   *!
   *Acknowledged transmission.  The MAC will attempt to retransmit
   *the frame until it is acknowledged
   */
  uint32_t ack;
  /*
   *!
   *Indirect transmission.  The MAC will queue the data and wait
   *for the destination device to poll for it.  This can only be used
   *by a coordinator device
   */
  uint32_t indirect;
  /*
   *!
   *This proprietary option forces the pending bit set for direct
   *transmission
   */
  uint32_t pendingbit;
  /*
   *!
   *This proprietary option prevents the frame from being retransmitted
   */
  uint32_t noretransmits;
  /*
   *!
   *This proprietary option prevents a MAC_MCPS_DATA_CNF
   *event from being sent for this frame
   */
  uint32_t noconfirm;
  /*
   *!
   *Use PIB value MAC_ALT_BE for the minimum backoff exponent
   */
  uint32_t usealtbe;
  /*
   *!
   *Use the power and channel values in macDataReq_t
   *instead of the PIB values
   */
  uint32_t usepowerandchannel;
};
#define API_MAC_TX_OPTIONS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&api_mac_tx_options__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0 }


/*
 *! MCPS data request type 
 */
struct  _ApiMacMcpsDataReq
{
  ProtobufCMessage base;
  /*
   *! The address of the destination device 
   */
  ApiMacSAddr *dstaddr;
  /*
   *! The PAN ID of the destination device 
   */
  uint32_t dstpanid;
  /*
   *! The source address mode 
   */
  ApiMacAddrType srcaddrmode;
  /*
   *! Application-defined handle value associated with this data request 
   */
  uint32_t msduhandle;
  /*
   *! TX options bit mask 
   */
  ApiMacTxOptions *txoptions;
  /*
   *! Transmit the data frame on this channel 
   */
  uint32_t channel;
  /*
   *! Transmit the data frame at this power level 
   */
  uint32_t power;
  /*
   *! pointer to the payload IE list, excluding termination IEs 
   */
  ProtobufCBinaryData pielist;
  /*
   *! length of the payload IE's 
   */
  uint32_t payloadielen;
  /*
   *!
   *Freq hopping Protocol Dispatch - RESERVED for future use, should
   *be cleared.
   */
  ApiMacFhDispatchType fhprotodispatch;
  /*
   *! Bitmap indicates which FH IE's need to be included 
   */
  uint32_t includefhies;
  /*
   *! Data buffer 
   */
  ApiMacSData *msdu;
  /*
   *! Security Parameters 
   */
  ApiMacSec *sec;
};
#define API_MAC_MCPS_DATA_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&api_mac_mcps_data_req__descriptor) \
    , NULL, 0, 0, 0, NULL, 0, 0, {0,NULL}, 0, 0, 0, NULL, NULL }


/*
 * Structure a Payload information Item 
 */
struct  _ApiMacPayloadIeItem
{
  ProtobufCMessage base;
  /*
   *! True if payload IE type is long 
   */
  uint32_t ietypelong;
  /*
   *! IE ID 
   */
  uint32_t ieid;
  /*
   *! IE Content Length - max size 2047 bytes 
   */
  uint32_t iecontentlen;
  /*
   *! Pointer to the IE's content 
   */
  ProtobufCBinaryData piecontent;
};
#define API_MAC_PAYLOAD_IE_ITEM__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&api_mac_payload_ie_item__descriptor) \
    , 0, 0, 0, {0,NULL} }


/*
 *! MCPS data indication type 
 */
struct  _ApiMacMcpsDataInd
{
  ProtobufCMessage base;
  /*
   *! The address of the sending device 
   */
  ApiMacSAddr *srcaddr;
  /*
   *! The address of the destination device 
   */
  ApiMacSAddr *dstaddr;
  /*
   *! The time, in backoffs, at which the data were received 
   */
  uint32_t timestamp;
  /*
   *!
   *The time, in internal MAC timer units, at which the data were received
   */
  uint32_t timestamp2;
  /*
   *! The PAN ID of the sending device 
   */
  uint32_t srcpanid;
  /*
   *! The PAN ID of the destination device 
   */
  uint32_t dstpanid;
  /*
   *! The link quality of the received data frame 
   */
  uint32_t mpdulinkquality;
  /*
   *! The raw correlation value of the received data frame 
   */
  uint32_t correlation;
  /*
   *! The received RF power in units dBm 
   */
  int32_t rssi;
  /*
   *! The data sequence number of the received frame 
   */
  uint32_t dsn;
  /*
   *! length of the payload IE buffer (pPayloadIE) 
   */
  uint32_t payloadielen;
  /*
   *! Pointer to the start of payload IEs 
   */
  ProtobufCBinaryData ppayloadie;
  /*
   *! Frequency Hopping Frame Type 
   */
  ApiMacFhFrameType fhframetype;
  /*
   *! Frequency hopping protocol dispatch - RESERVED for future use. 
   */
  ApiMacFhDispatchType fhprotodispatch;
  /*
   *! Frame counter value of the received data frame (if used) 
   */
  uint32_t framecntr;
  /*
   *! Security Parameters 
   */
  ApiMacSec *sec;
  /*
   *! Data Buffer 
   */
  ApiMacSData *msdu;
};
#define API_MAC_MCPS_DATA_IND__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&api_mac_mcps_data_ind__descriptor) \
    , NULL, NULL, 0, 0, 0, 0, 0, 0, 0, 0, 0, {0,NULL}, 0, 0, 0, NULL, NULL }


/*
 *! MCPS data confirm type 
 */
struct  _ApiMacMcpsDataCnf
{
  ProtobufCMessage base;
  /*
   *! Contains the status of the data request operation 
   */
  ApiMacStatus status;
  /*
   *! Application-defined handle value associated with the data request 
   */
  uint32_t msduhandle;
  /*
   *! The time, in backoffs, at which the frame was transmitted 
   */
  uint32_t timestamp;
  /*
   *!
   *The time, in internal MAC timer units, at which the frame was
   *transmitted
   */
  uint32_t timestamp2;
  /*
   *! The number of retries required to transmit the data frame 
   */
  uint32_t retries;
  /*
   *! The link quality of the received ack frame 
   */
  uint32_t mpdulinkquality;
  /*
   *! The raw correlation value of the received ack frame 
   */
  uint32_t correlation;
  /*
   *! The RF power of the received ack frame in units dBm 
   */
  int32_t rssi;
  /*
   *! Frame counter value used (if any) for the transmitted frame 
   */
  uint32_t framecntr;
};
#define API_MAC_MCPS_DATA_CNF__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&api_mac_mcps_data_cnf__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, 0 }


/*
 *! MCPS purge confirm type 
 */
struct  _ApiMacMcpsPurgeCnf
{
  ProtobufCMessage base;
  /*
   *! The status of the purge request operation 
   */
  ApiMacStatus status;
  /*
   *! Application-defined handle value associated with the data request 
   */
  uint32_t msduhandle;
};
#define API_MAC_MCPS_PURGE_CNF__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&api_mac_mcps_purge_cnf__descriptor) \
    , 0, 0 }


/*
 *! PAN descriptor type 
 */
struct  _ApiMacPanDesc
{
  ProtobufCMessage base;
  /*
   *! The address of the coordinator sending the beacon 
   */
  uint64_t coordaddress;
  /*
   *! The PAN ID of the network 
   */
  uint32_t coordpanid;
  /*
   *!
   *The superframe specification of the network, this field contains
   *the beacon order, superframe order, final CAP slot, battery life
   *extension, PAN coordinator bit, and association permit flag.
   *Use the following macros to parse this field: APIMAC_SFS_BEACON_ORDER(),
   *APIMAC_SFS_SUPERFRAME_ORDER(), APIMAC_SFS_FINAL_CAP_SLOT()
   *APIMAC_SFS_BLE(), APIMAC_SFS_PAN_COORDINATOR(), and
   *APIMAC_SFS_ASSOCIATION_PERMIT().
   */
  uint32_t superframespec;
  /*
   *! The logical channel of the network 
   */
  uint32_t logicalchannel;
  /*
   *! The current channel page occupied by the network 
   */
  uint32_t channelpage;
  /*
   *! TRUE if coordinator accepts GTS requests 
   */
  uint32_t gtspermit;
  /*
   *! The link quality of the received beacon 
   */
  uint32_t linkquality;
  /*
   *! The time at which the beacon was received, in backoffs 
   */
  uint32_t timestamp;
  /*
   *! TRUE if there was an error in the security processing 
   */
  uint32_t securityfailure;
  /*
   *! The security parameters for the received beacon frame 
   */
  ApiMacSec *sec;
};
#define API_MAC_PAN_DESC__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&api_mac_pan_desc__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, NULL }


/*
 *! MLME associate request type 
 */
struct  _ApiMacMlmeAssociateReq
{
  ProtobufCMessage base;
  /*
   *! The security parameters for this message 
   */
  ApiMacSec *sec;
  /*
   *! The channel on which to attempt association 
   */
  uint32_t logicalchannel;
  /*
   *! The channel page on which to attempt association 
   */
  uint32_t channelpage;
  /*
   *! Identifier for the PHY descriptor 
   */
  uint32_t phyid;
  /*
   *! Address of the coordinator with which to associate 
   */
  uint64_t coordaddress;
  /*
   *! The identifier of the PAN with which to associate 
   */
  uint32_t coordpanid;
  /*
   *! The operational capabilities of this device 
   */
  ApiMacCapabilityInfo *capabilityinformation;
};
#define API_MAC_MLME_ASSOCIATE_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&api_mac_mlme_associate_req__descriptor) \
    , NULL, 0, 0, 0, 0, 0, NULL }


/*
 *! MLME associate response type 
 */
struct  _ApiMacMlmeAssociateRsp
{
  ProtobufCMessage base;
  /*
   *! The security parameters for this message 
   */
  ApiMacSec *sec;
  /*
   *! The address of the device requesting association 
   */
  uint64_t deviceaddress;
  /*
   *! The short address allocated to the device 
   */
  uint32_t assocshortaddress;
  /*
   *! The status of the association attempt 
   */
  ApiMacAssocStatus status;
};
#define API_MAC_MLME_ASSOCIATE_RSP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&api_mac_mlme_associate_rsp__descriptor) \
    , NULL, 0, 0, 0 }


/*
 *! MLME disassociate request type 
 */
struct  _ApiMacMlmeDisassociateReq
{
  ProtobufCMessage base;
  /*
   *! The security parameters for this message 
   */
  ApiMacSec *sec;
  /*
   *! The address of the device with which to disassociate 
   */
  uint64_t deviceaddress;
  /*
   *! The PAN ID of the device 
   */
  uint32_t devicepanid;
  /*
   *! The disassociate reason 
   */
  ApiMacDisassociateReason disassociatereason;
  /*
   *! Transmit Indirect 
   */
  uint32_t txindirect;
};
#define API_MAC_MLME_DISASSOCIATE_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&api_mac_mlme_disassociate_req__descriptor) \
    , NULL, 0, 0, 0, 0 }


/*
 *! MLME orphan response type 
 */
struct  _ApiMacMlmeOrphanRsp
{
  ProtobufCMessage base;
  /*
   *! The security parameters for this message 
   */
  ApiMacSec *sec;
  /*
   *! The extended address of the device sending the orphan notification 
   */
  uint64_t orphanaddress;
  /*
   *! The short address of the orphaned device 
   */
  uint32_t shortaddress;
  /*
   *!
   *TRUE if the orphaned device is associated with this coordinator
   */
  uint32_t associatedmember;
};
#define API_MAC_MLME_ORPHAN_RSP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&api_mac_mlme_orphan_rsp__descriptor) \
    , NULL, 0, 0, 0 }


/*
 *! MLME poll request type 
 */
struct  _ApiMacMlmePollReq
{
  ProtobufCMessage base;
  /*
   *! The address of the coordinator device to poll 
   */
  uint64_t coordaddress;
  /*
   *! The PAN ID of the coordinator 
   */
  uint32_t coordpanid;
  /*
   *! The security parameters for this message 
   */
  ApiMacSec *sec;
};
#define API_MAC_MLME_POLL_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&api_mac_mlme_poll_req__descriptor) \
    , 0, 0, NULL }


/*
 *! MLME scan request type 
 */
struct  _ApiMacMlmeScanReq
{
  ProtobufCMessage base;
  /*
   *! Bit mask indicating which channels to scan 
   */
  /*
   * bitmask [APIMAC_154G_CHANNEL_BITMAP_SIZ]; 
   */
  ProtobufCBinaryData scanchannels;
  /*
   *! The type of scan 
   */
  ApiMacScanType scantype;
  /*
   *! The exponent used in the scan duration calculation 
   */
  uint32_t scanduration;
  /*
   *! The channel page on which to perform the scan 
   */
  uint32_t channelpage;
  /*
   *! PHY ID corresponding to the PHY descriptor to use 
   */
  uint32_t phyid;
  /*
   *!
   *The maximum number of PAN descriptor results, these
   *results will be returned in the scan confirm.
   */
  uint32_t maxresults;
  /*
   *!
   *Only devices with permit joining enabled respond to the enhanced
   *beacon request
   */
  uint32_t permitjoining;
  /*
   *!
   *The device will respond to the enhanced beacon request
   *if mpduLinkQuality is equal or higher than this value
   */
  uint32_t linkquality;
  /*
   *!
   *The device will then randomly determine if it is to
   *respond to the enhanced beacon request based on meeting
   *this probability (0 to 100%).
   */
  uint32_t percentfilter;
  /*
   *! The security parameters for this message 
   */
  ApiMacSec *sec;
  /*
   *!
   *When TRUE, scanDuration is ignored. When FALSE, scan duration
   *shall be set to scanDuration; MPMScanDuration is ignored
   */
  uint32_t mpmscan;
  /*
   *! BPAN or NBPAN 
   */
  uint32_t mpmscantype;
  /*
   *!
   *If MPMScanType is BPAN, MPMScanDuration values are 0-14.
   *It is used in determining the max time spent scanning
   *for an EB in a beacon enabled PAN on the channel.
   *[aBaseSuperframeDuration * 2^n symbols], where
   *n is the MPMScanDuration.
   *If MPMScanType is NBPAN, valid values are 1 - 16383.
   *It is used in determining the max time spent scanning for an
   *EB in nonbeacon-enabled PAN on the channel.
   *[aBaseSlotDuration * n] symbols, where n
   *is MPMScanDuration.
   */
  uint32_t mpmscanduration;
};
#define API_MAC_MLME_SCAN_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&api_mac_mlme_scan_req__descriptor) \
    , {0,NULL}, 0, 0, 0, 0, 0, 0, 0, 0, NULL, 0, 0, 0 }


/*
 *! MPM(Multi-PHY layer management) parameters 
 */
struct  _ApiMacMpmParams
{
  ProtobufCMessage base;
  /*
   *!
   *The exponent used to calculate the enhanced beacon interval.
   *A value of 15 indicates no EB in a beacon enabled PAN
   */
  uint32_t ebeaconorder;
  /*
   *!
   *Indicates the time diff between the EB and the preceeding
   *periodic Beacon
   */
  uint32_t offsettimeslot;
  /*
   *!
   *Indicates how often the EB to tx in a non-beacon enabled PAN. A value of
   *16383 indicates no EB in a non-beacon enabled PAN
   */
  uint32_t nbpanebeaconorder;
  /*
   *!
   *pointer to the buffer containing the Information element IDs which needs
   *to be sent in Enhanced Beacon.
   */
  ProtobufCBinaryData pieids;
  /*
   *!
   *The number of Information Elements in the buffer (size of buffer
   *at pIEIDs
   */
  uint32_t numies;
};
#define API_MAC_MPM_PARAMS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&api_mac_mpm_params__descriptor) \
    , 0, 0, 0, {0,NULL}, 0 }


/*
 *! MLME start request type 
 */
struct  _ApiMacMlmeStartReq
{
  ProtobufCMessage base;
  /*
   *!
   *The time to begin transmitting beacons relative to the received beacon
   */
  uint32_t starttime;
  /*
   *!
   *The PAN ID to use.  This parameter is ignored if panCoordinator is FALSE
   */
  uint32_t panid;
  /*
   *!
   *The logical channel to use.  This parameter is ignored if panCoordinator
   *is FALSE
   */
  uint32_t logicalchannel;
  /*
   *!
   *The channel page to use.  This parameter is ignored if panCoordinator
   *is FALSE
   */
  uint32_t channelpage;
  /*
   *! PHY ID corresponding to the PHY descriptor to use 
   */
  uint32_t phyid;
  /*
   *! The exponent used to calculate the beacon interval 
   */
  uint32_t beaconorder;
  /*
   *! The exponent used to calculate the superframe duration 
   */
  uint32_t superframeorder;
  /*
   *! Set to TRUE to start a network as PAN coordinator 
   */
  uint32_t pancoordinator;
  /*
   *!
   *If this value is TRUE, the receiver is disabled after
   *MAC_BATT_LIFE_EXT_PERIODS full backoff periods following the interframe
   *spacing period of the beacon frame
   */
  uint32_t batterylifeext;
  /*
   *!
   *Set to TRUE to transmit a coordinator realignment prior to changing
   *the superframe configuration
   */
  uint32_t coordrealignment;
  /*
   *! Security parameters for the coordinator realignment frame 
   */
  ApiMacSec *realignsec;
  /*
   *! Security parameters for the beacon frame 
   */
  ApiMacSec *beaconsec;
  /*
   *! MPM (multi-PHY layer management) parameters 
   */
  ApiMacMpmParams *mpmparams;
  /*
   *! Indicates whether frequency hopping needs to be enabled 
   */
  uint32_t startfh;
};
#define API_MAC_MLME_START_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&api_mac_mlme_start_req__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, NULL, NULL, NULL, 0 }


/*
 *! MAC_MlmeSyncReq type 
 */
struct  _ApiMacSyncReq
{
  ProtobufCMessage base;
  /*
   *! The logical channel to use 
   */
  uint32_t logicalchannel;
  /*
   *! The channel page to use 
   */
  uint32_t channelpage;
  /*
   *! PHY ID corresponding to the PHY descriptor to use 
   */
  uint32_t phyid;
  /*
   *!
   *Set to TRUE to continue tracking beacons after synchronizing with the
   *first beacon.  Set to FALSE to only synchronize with the first beacon
   */
  uint32_t trackbeacon;
};
#define API_MAC_SYNC_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&api_mac_sync_req__descriptor) \
    , 0, 0, 0, 0 }


/*
 *! MLME WiSUN Async request type 
 */
struct  _ApiMacMlmeWSAsyncReq
{
  ProtobufCMessage base;
  /*
   *! Start or Stop Async operation 
   */
  ApiMacWisunAsyncOperation operation;
  /*
   *! Async frame type 
   */
  ApiMacWisunAsyncFrame frametype;
  /*
   *!
   *Bit Mask indicating which channels to send the Async frames for the
   *start operation
   */
  /*
   * bitmap array [APIMAC_154G_CHANNEL_BITMAP_SIZ]; 
   */
  ProtobufCBinaryData channels;
  /*
   *! The security parameters for this message 
   */
  ApiMacSec *sec;
};
#define API_MAC_MLME_WSASYNC_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&api_mac_mlme_wsasync_req__descriptor) \
    , 0, 0, {0,NULL}, NULL }


/*
 *! MAC_MLME_ASSOCIATE_IND type 
 */
struct  _ApiMacMlmeAssociateInd
{
  ProtobufCMessage base;
  /*
   *! The address of the device requesting association 
   */
  uint64_t deviceaddress;
  /*
   *! The operational capabilities of the device requesting association 
   */
  ApiMacCapabilityInfo *capabilityinformation;
  /*
   *! The security parameters for this message 
   */
  ApiMacSec *sec;
};
#define API_MAC_MLME_ASSOCIATE_IND__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&api_mac_mlme_associate_ind__descriptor) \
    , 0, NULL, NULL }


/*
 *! MAC_MLME_ASSOCIATE_CNF type 
 */
struct  _ApiMacMlmeAssociateCnf
{
  ProtobufCMessage base;
  /*
   *! Status of associate attempt 
   */
  ApiMacAssocStatus status;
  /*
   *! If successful, the short address allocated to this device 
   */
  uint32_t assocshortaddress;
  /*
   *! The security parameters for this message 
   */
  ApiMacSec *sec;
};
#define API_MAC_MLME_ASSOCIATE_CNF__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&api_mac_mlme_associate_cnf__descriptor) \
    , 0, 0, NULL }


/*
 *! MAC_MLME_DISASSOCIATE_IND type 
 */
struct  _ApiMacMlmeDisassociateInd
{
  ProtobufCMessage base;
  /*
   *! The address of the device sending the disassociate command 
   */
  uint64_t deviceaddress;
  /*
   *! The disassociate reason 
   */
  ApiMacDisassociateReason disassociatereason;
  /*
   *! The security parameters for this message 
   */
  ApiMacSec *sec;
};
#define API_MAC_MLME_DISASSOCIATE_IND__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&api_mac_mlme_disassociate_ind__descriptor) \
    , 0, 0, NULL }


/*
 *! MAC_MLME_DISASSOCIATE_CNF type 
 */
struct  _ApiMacMlmeDisassociateCnf
{
  ProtobufCMessage base;
  /*
   *! status of the disassociate attempt 
   */
  ApiMacStatus status;
  /*
   *!
   *The address of the device that has either requested disassociation
   *or been instructed to disassociate by its coordinator
   */
  uint64_t deviceaddress;
  /*
   *!
   *The pan ID of the device that has either requested disassociation
   *or been instructed to disassociate by its coordinator
   */
  uint32_t panid;
};
#define API_MAC_MLME_DISASSOCIATE_CNF__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&api_mac_mlme_disassociate_cnf__descriptor) \
    , 0, 0, 0 }


/*
 *! MAC Beacon data type 
 */
struct  _ApiMacBeaconData
{
  ProtobufCMessage base;
  /*
   *! The PAN descriptor for the received beacon 
   */
  ApiMacPanDesc *ppandesc;
  /*
   *! The number of pending short addresses 
   */
  uint32_t numpendshortaddr;
  /*
   *!
   *The list of device short addresses for which the sender of the beacon
   *has data
   */
  size_t n_pshortaddrlist;
  uint32_t *pshortaddrlist;
  /*
   *! The number of pending extended addresses 
   */
  uint32_t numpendextaddr;
  /*
   *!
   *The list of device short addresses for which the sender of the beacon
   *has data
   */
  size_t n_pextaddrlist;
  uint32_t *pextaddrlist;
  /*
   *! The number of bytes in the beacon payload of the beacon frame 
   */
  uint32_t sdulength;
  /*
   *! The beacon payload 
   */
  ProtobufCBinaryData psdu;
};
#define API_MAC_BEACON_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&api_mac_beacon_data__descriptor) \
    , NULL, 0, 0,NULL, 0, 0,NULL, 0, {0,NULL} }


/*
 *! Coexistence Information element content type 
 */
struct  _ApiMacCoexist
{
  ProtobufCMessage base;
  /*
   *!
   *Beacon Order field shall specify the transmission interval of the beacon
   */
  uint32_t beaconorder;
  /*
   *!
   *Superframe Order field shall specify the length of time during which the
   *superframe is active (i.e., receiver enabled), including the Beacon
   *frametransmission time
   */
  uint32_t superframeorder;
  /*
   *! Final CAP slot 
   */
  uint32_t finalcapslot;
  /*
   *!
   *Enhanced Beacon Order field specifies the transmission interval
   *of the Enhanced Beacon frames in a beacon enabled network
   */
  uint32_t ebeaconorder;
  /*
   *! time offset between periodic beacon and the Enhanced Beacon 
   */
  uint32_t offsettimeslot;
  /*
   *!
   *Actual slot position in which the Enhanced Beacon frame is
   *transmitted due to the backoff procedure in the CAP
   */
  uint32_t capbackoff;
  /*
   *!
   *NBPAN Enhanced Beacon Order field specifies the transmission interval
   *between consecutive Enhanced Beacon frames in the nonbeacon-enabled mode
   */
  uint32_t ebeaconordernbpan;
};
#define API_MAC_COEXIST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&api_mac_coexist__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0 }


/*
 *! MAC Enhanced beacon data type 
 */
struct  _ApiMacEBeaconData
{
  ProtobufCMessage base;
  /*
   *! Beacon Coexist data 
   */
  ApiMacCoexist *coexist;
};
#define API_MAC_E_BEACON_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&api_mac_e_beacon_data__descriptor) \
    , NULL }


/*
 *! MAC_MLME_BEACON_NOTIFY_IND type 
 */
struct  _ApiMacMlmeBeaconNotifyInd
{
  ProtobufCMessage base;
  /*
   *! Indicates the beacon type: beacon or enhanced beacon 
   */
  ApiMacBeaconType beacontype;
  /*
   *! The beacon sequence number or enhanced beacon sequence number 
   */
  /*
   *!
   *Beacon data union depending on beaconType, select beaconData or
   *or eBeaconData.
   */
  uint32_t bsn;
  /*
   *! beacon data 
   */
  ApiMacBeaconData *beacon;
  /*
   *! enhanced beacon data 
   */
  ApiMacEBeaconData *ebeacon;
};
#define API_MAC_MLME_BEACON_NOTIFY_IND__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&api_mac_mlme_beacon_notify_ind__descriptor) \
    , 0, 0, NULL, NULL }


/*
 *! MAC_MLME_ORPHAN_IND type 
 */
struct  _ApiMacMlmeOrphanInd
{
  ProtobufCMessage base;
  /*
   *! The address of the orphaned device 
   */
  uint64_t orphanaddress;
  /*
   *! The security parameters for this message 
   */
  ApiMacSec *sec;
};
#define API_MAC_MLME_ORPHAN_IND__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&api_mac_mlme_orphan_ind__descriptor) \
    , 0, NULL }


/*
 *! MAC_MLME_SCAN_CNF type 
 */
struct  _ApiMacMlmeScanCnf
{
  ProtobufCMessage base;
  /*
   *! status of the  scan request 
   */
  ApiMacStatus status;
  /*
   *! The type of scan requested 
   */
  ApiMacScanType scantype;
  /*
   *! The channel page of the scan 
   */
  uint32_t channelpage;
  /*
   *! PHY ID corresponding to the PHY descriptor used during scan 
   */
  uint32_t phyid;
  /*
   *! Bit mask of channels that were not scanned 
   */
  /*
   * bitmask: [APIMAC_154G_CHANNEL_BITMAP_SIZ]; 
   */
  ProtobufCBinaryData unscannedchannels;
  /*
   *! The number of PAN descriptors returned in the results list 
   */
  /*
   *! Depending on the scanType the results are in this union 
   */
  uint32_t resultlistsize;
  /*
   *! The list of energy measurements, one for each channel scanned 
   */
  size_t n_penergydetect;
  uint32_t *penergydetect;
  /*
   *! The list of PAN descriptors, one for each beacon found 
   */
  size_t n_ppandescriptor;
  ApiMacPanDesc **ppandescriptor;
};
#define API_MAC_MLME_SCAN_CNF__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&api_mac_mlme_scan_cnf__descriptor) \
    , 0, 0, 0, 0, {0,NULL}, 0, 0,NULL, 0,NULL }


/*
 *! MAC_MLME_START_CNF type 
 */
struct  _ApiMacMlmeStartCnf
{
  ProtobufCMessage base;
  /*
   *! status of the  start request 
   */
  ApiMacStatus status;
};
#define API_MAC_MLME_START_CNF__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&api_mac_mlme_start_cnf__descriptor) \
    , 0 }


/*
 *! MAC_MLME_SYNC_LOSS_IND type 
 */
struct  _ApiMacMlmeSyncLossInd
{
  ProtobufCMessage base;
  /*
   *! Reason that the synchronization was lost 
   */
  ApiMacStatus reason;
  /*
   *! The PAN ID of the realignment 
   */
  uint32_t panid;
  /*
   *! The logical channel of the realignment 
   */
  uint32_t logicalchannel;
  /*
   *! The channel page of the realignment 
   */
  uint32_t channelpage;
  /*
   *! PHY ID corresponding to the PHY descriptor of the realignment 
   */
  uint32_t phyid;
  /*
   *! The security parameters for this message 
   */
  ApiMacSec *sec;
};
#define API_MAC_MLME_SYNC_LOSS_IND__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&api_mac_mlme_sync_loss_ind__descriptor) \
    , 0, 0, 0, 0, 0, NULL }


/*
 * MAC_MLME_POLL_CNF type 
 */
struct  _ApiMacMlmePollCnf
{
  ProtobufCMessage base;
  /*
   *! status of the  poll request 
   */
  ApiMacStatus status;
  /*
   *! Set if framePending bit in data packet is set 
   */
  uint32_t framepending;
};
#define API_MAC_MLME_POLL_CNF__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&api_mac_mlme_poll_cnf__descriptor) \
    , 0, 0 }


/*
 * MAC_MLME_COMM_STATUS_IND type 
 */
struct  _ApiMacMlmeCommStatusInd
{
  ProtobufCMessage base;
  /*
   *! status of the event 
   */
  ApiMacStatus status;
  /*
   *! The source address associated with the event 
   */
  uint64_t srcaddr;
  /*
   *! The destination address associated with the event 
   */
  uint64_t dstaddr;
  /*
   *! The PAN ID associated with the event 
   */
  uint32_t panid;
  /*
   *! The reason the event was generated 
   */
  ApiMacCommStatusReason reason;
  /*
   *! The security parameters for this message 
   */
  ApiMacSec *sec;
};
#define API_MAC_MLME_COMM_STATUS_IND__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&api_mac_mlme_comm_status_ind__descriptor) \
    , 0, 0, 0, 0, 0, NULL }


/*
 *! MAC_MLME_POLL_IND type 
 */
struct  _ApiMacMlmePollInd
{
  ProtobufCMessage base;
  /*
   *! Short address of the device sending the data request 
   */
  uint64_t srcaddr;
  /*
   *! Pan ID of the device sending the data request 
   */
  uint32_t srcpanid;
  /*
   *!
   *indication that no MAC_McpsDataReq() is required. It is set when
   *MAC_MLME_POLL_IND is generated, to simply indicate that a received
   *data request frame was acked with pending bit cleared.
   */
  uint32_t norsp;
};
#define API_MAC_MLME_POLL_IND__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&api_mac_mlme_poll_ind__descriptor) \
    , 0, 0, 0 }


/*
 *! MAC_MLME_WS_ASYNC_FRAME_IND type 
 */
struct  _ApiMacMlmeWsAsyncInd
{
  ProtobufCMessage base;
  ApiMacMcpsDataInd *data;
};
#define API_MAC_MLME_WS_ASYNC_IND__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&api_mac_mlme_ws_async_ind__descriptor) \
    , NULL }


/*
 *! MAC_MLME_WS_ASYNC_FRAME_CNF type 
 */
struct  _ApiMacMlmeWsAsyncCnfK
{
  ProtobufCMessage base;
  /*
   *! status of the  Async request 
   */
  ApiMacStatus status;
};
#define API_MAC_MLME_WS_ASYNC_CNF_K__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&api_mac_mlme_ws_async_cnf_k__descriptor) \
    , 0 }


/* ApiMacSAddr methods */
void   api_mac_s_addr__init
                     (ApiMacSAddr         *message);
size_t api_mac_s_addr__get_packed_size
                     (const ApiMacSAddr   *message);
size_t api_mac_s_addr__pack
                     (const ApiMacSAddr   *message,
                      uint8_t             *out);
size_t api_mac_s_addr__pack_to_buffer
                     (const ApiMacSAddr   *message,
                      ProtobufCBuffer     *buffer);
ApiMacSAddr *
       api_mac_s_addr__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   api_mac_s_addr__free_unpacked
                     (ApiMacSAddr *message,
                      ProtobufCAllocator *allocator);
/* ApiMacSData methods */
void   api_mac_s_data__init
                     (ApiMacSData         *message);
size_t api_mac_s_data__get_packed_size
                     (const ApiMacSData   *message);
size_t api_mac_s_data__pack
                     (const ApiMacSData   *message,
                      uint8_t             *out);
size_t api_mac_s_data__pack_to_buffer
                     (const ApiMacSData   *message,
                      ProtobufCBuffer     *buffer);
ApiMacSData *
       api_mac_s_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   api_mac_s_data__free_unpacked
                     (ApiMacSData *message,
                      ProtobufCAllocator *allocator);
/* ApiMacMRFSKPHYDesc methods */
void   api_mac__mrfskphydesc__init
                     (ApiMacMRFSKPHYDesc         *message);
size_t api_mac__mrfskphydesc__get_packed_size
                     (const ApiMacMRFSKPHYDesc   *message);
size_t api_mac__mrfskphydesc__pack
                     (const ApiMacMRFSKPHYDesc   *message,
                      uint8_t             *out);
size_t api_mac__mrfskphydesc__pack_to_buffer
                     (const ApiMacMRFSKPHYDesc   *message,
                      ProtobufCBuffer     *buffer);
ApiMacMRFSKPHYDesc *
       api_mac__mrfskphydesc__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   api_mac__mrfskphydesc__free_unpacked
                     (ApiMacMRFSKPHYDesc *message,
                      ProtobufCAllocator *allocator);
/* ApiMacSec methods */
void   api_mac_sec__init
                     (ApiMacSec         *message);
size_t api_mac_sec__get_packed_size
                     (const ApiMacSec   *message);
size_t api_mac_sec__pack
                     (const ApiMacSec   *message,
                      uint8_t             *out);
size_t api_mac_sec__pack_to_buffer
                     (const ApiMacSec   *message,
                      ProtobufCBuffer     *buffer);
ApiMacSec *
       api_mac_sec__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   api_mac_sec__free_unpacked
                     (ApiMacSec *message,
                      ProtobufCAllocator *allocator);
/* ApiMacKeyIdLookupDescriptor methods */
void   api_mac_key_id_lookup_descriptor__init
                     (ApiMacKeyIdLookupDescriptor         *message);
size_t api_mac_key_id_lookup_descriptor__get_packed_size
                     (const ApiMacKeyIdLookupDescriptor   *message);
size_t api_mac_key_id_lookup_descriptor__pack
                     (const ApiMacKeyIdLookupDescriptor   *message,
                      uint8_t             *out);
size_t api_mac_key_id_lookup_descriptor__pack_to_buffer
                     (const ApiMacKeyIdLookupDescriptor   *message,
                      ProtobufCBuffer     *buffer);
ApiMacKeyIdLookupDescriptor *
       api_mac_key_id_lookup_descriptor__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   api_mac_key_id_lookup_descriptor__free_unpacked
                     (ApiMacKeyIdLookupDescriptor *message,
                      ProtobufCAllocator *allocator);
/* ApiMacKeyDeviceDescriptor methods */
void   api_mac_key_device_descriptor__init
                     (ApiMacKeyDeviceDescriptor         *message);
size_t api_mac_key_device_descriptor__get_packed_size
                     (const ApiMacKeyDeviceDescriptor   *message);
size_t api_mac_key_device_descriptor__pack
                     (const ApiMacKeyDeviceDescriptor   *message,
                      uint8_t             *out);
size_t api_mac_key_device_descriptor__pack_to_buffer
                     (const ApiMacKeyDeviceDescriptor   *message,
                      ProtobufCBuffer     *buffer);
ApiMacKeyDeviceDescriptor *
       api_mac_key_device_descriptor__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   api_mac_key_device_descriptor__free_unpacked
                     (ApiMacKeyDeviceDescriptor *message,
                      ProtobufCAllocator *allocator);
/* ApiMacKeyUsageDescriptor methods */
void   api_mac_key_usage_descriptor__init
                     (ApiMacKeyUsageDescriptor         *message);
size_t api_mac_key_usage_descriptor__get_packed_size
                     (const ApiMacKeyUsageDescriptor   *message);
size_t api_mac_key_usage_descriptor__pack
                     (const ApiMacKeyUsageDescriptor   *message,
                      uint8_t             *out);
size_t api_mac_key_usage_descriptor__pack_to_buffer
                     (const ApiMacKeyUsageDescriptor   *message,
                      ProtobufCBuffer     *buffer);
ApiMacKeyUsageDescriptor *
       api_mac_key_usage_descriptor__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   api_mac_key_usage_descriptor__free_unpacked
                     (ApiMacKeyUsageDescriptor *message,
                      ProtobufCAllocator *allocator);
/* ApiMacKeyDescriptor methods */
void   api_mac_key_descriptor__init
                     (ApiMacKeyDescriptor         *message);
size_t api_mac_key_descriptor__get_packed_size
                     (const ApiMacKeyDescriptor   *message);
size_t api_mac_key_descriptor__pack
                     (const ApiMacKeyDescriptor   *message,
                      uint8_t             *out);
size_t api_mac_key_descriptor__pack_to_buffer
                     (const ApiMacKeyDescriptor   *message,
                      ProtobufCBuffer     *buffer);
ApiMacKeyDescriptor *
       api_mac_key_descriptor__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   api_mac_key_descriptor__free_unpacked
                     (ApiMacKeyDescriptor *message,
                      ProtobufCAllocator *allocator);
/* ApiMacDeviceDescriptor methods */
void   api_mac_device_descriptor__init
                     (ApiMacDeviceDescriptor         *message);
size_t api_mac_device_descriptor__get_packed_size
                     (const ApiMacDeviceDescriptor   *message);
size_t api_mac_device_descriptor__pack
                     (const ApiMacDeviceDescriptor   *message,
                      uint8_t             *out);
size_t api_mac_device_descriptor__pack_to_buffer
                     (const ApiMacDeviceDescriptor   *message,
                      ProtobufCBuffer     *buffer);
ApiMacDeviceDescriptor *
       api_mac_device_descriptor__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   api_mac_device_descriptor__free_unpacked
                     (ApiMacDeviceDescriptor *message,
                      ProtobufCAllocator *allocator);
/* ApiMacSecurityLevelDescriptor methods */
void   api_mac_security_level_descriptor__init
                     (ApiMacSecurityLevelDescriptor         *message);
size_t api_mac_security_level_descriptor__get_packed_size
                     (const ApiMacSecurityLevelDescriptor   *message);
size_t api_mac_security_level_descriptor__pack
                     (const ApiMacSecurityLevelDescriptor   *message,
                      uint8_t             *out);
size_t api_mac_security_level_descriptor__pack_to_buffer
                     (const ApiMacSecurityLevelDescriptor   *message,
                      ProtobufCBuffer     *buffer);
ApiMacSecurityLevelDescriptor *
       api_mac_security_level_descriptor__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   api_mac_security_level_descriptor__free_unpacked
                     (ApiMacSecurityLevelDescriptor *message,
                      ProtobufCAllocator *allocator);
/* ApiMacSecurityDeviceDescriptor methods */
void   api_mac_security_device_descriptor__init
                     (ApiMacSecurityDeviceDescriptor         *message);
size_t api_mac_security_device_descriptor__get_packed_size
                     (const ApiMacSecurityDeviceDescriptor   *message);
size_t api_mac_security_device_descriptor__pack
                     (const ApiMacSecurityDeviceDescriptor   *message,
                      uint8_t             *out);
size_t api_mac_security_device_descriptor__pack_to_buffer
                     (const ApiMacSecurityDeviceDescriptor   *message,
                      ProtobufCBuffer     *buffer);
ApiMacSecurityDeviceDescriptor *
       api_mac_security_device_descriptor__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   api_mac_security_device_descriptor__free_unpacked
                     (ApiMacSecurityDeviceDescriptor *message,
                      ProtobufCAllocator *allocator);
/* ApiMacSecurityKeyEntry methods */
void   api_mac_security_key_entry__init
                     (ApiMacSecurityKeyEntry         *message);
size_t api_mac_security_key_entry__get_packed_size
                     (const ApiMacSecurityKeyEntry   *message);
size_t api_mac_security_key_entry__pack
                     (const ApiMacSecurityKeyEntry   *message,
                      uint8_t             *out);
size_t api_mac_security_key_entry__pack_to_buffer
                     (const ApiMacSecurityKeyEntry   *message,
                      ProtobufCBuffer     *buffer);
ApiMacSecurityKeyEntry *
       api_mac_security_key_entry__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   api_mac_security_key_entry__free_unpacked
                     (ApiMacSecurityKeyEntry *message,
                      ProtobufCAllocator *allocator);
/* ApiMacSecurityPibKeyIdLookupEntry methods */
void   api_mac_security_pib_key_id_lookup_entry__init
                     (ApiMacSecurityPibKeyIdLookupEntry         *message);
size_t api_mac_security_pib_key_id_lookup_entry__get_packed_size
                     (const ApiMacSecurityPibKeyIdLookupEntry   *message);
size_t api_mac_security_pib_key_id_lookup_entry__pack
                     (const ApiMacSecurityPibKeyIdLookupEntry   *message,
                      uint8_t             *out);
size_t api_mac_security_pib_key_id_lookup_entry__pack_to_buffer
                     (const ApiMacSecurityPibKeyIdLookupEntry   *message,
                      ProtobufCBuffer     *buffer);
ApiMacSecurityPibKeyIdLookupEntry *
       api_mac_security_pib_key_id_lookup_entry__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   api_mac_security_pib_key_id_lookup_entry__free_unpacked
                     (ApiMacSecurityPibKeyIdLookupEntry *message,
                      ProtobufCAllocator *allocator);
/* ApiMacSecurityPibKeyDeviceEntry methods */
void   api_mac_security_pib_key_device_entry__init
                     (ApiMacSecurityPibKeyDeviceEntry         *message);
size_t api_mac_security_pib_key_device_entry__get_packed_size
                     (const ApiMacSecurityPibKeyDeviceEntry   *message);
size_t api_mac_security_pib_key_device_entry__pack
                     (const ApiMacSecurityPibKeyDeviceEntry   *message,
                      uint8_t             *out);
size_t api_mac_security_pib_key_device_entry__pack_to_buffer
                     (const ApiMacSecurityPibKeyDeviceEntry   *message,
                      ProtobufCBuffer     *buffer);
ApiMacSecurityPibKeyDeviceEntry *
       api_mac_security_pib_key_device_entry__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   api_mac_security_pib_key_device_entry__free_unpacked
                     (ApiMacSecurityPibKeyDeviceEntry *message,
                      ProtobufCAllocator *allocator);
/* ApiMacSecurityPibKeyUsageEnttry methods */
void   api_mac_security_pib_key_usage_enttry__init
                     (ApiMacSecurityPibKeyUsageEnttry         *message);
size_t api_mac_security_pib_key_usage_enttry__get_packed_size
                     (const ApiMacSecurityPibKeyUsageEnttry   *message);
size_t api_mac_security_pib_key_usage_enttry__pack
                     (const ApiMacSecurityPibKeyUsageEnttry   *message,
                      uint8_t             *out);
size_t api_mac_security_pib_key_usage_enttry__pack_to_buffer
                     (const ApiMacSecurityPibKeyUsageEnttry   *message,
                      ProtobufCBuffer     *buffer);
ApiMacSecurityPibKeyUsageEnttry *
       api_mac_security_pib_key_usage_enttry__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   api_mac_security_pib_key_usage_enttry__free_unpacked
                     (ApiMacSecurityPibKeyUsageEnttry *message,
                      ProtobufCAllocator *allocator);
/* ApiMacSecurityPibKeyEntry methods */
void   api_mac_security_pib_key_entry__init
                     (ApiMacSecurityPibKeyEntry         *message);
size_t api_mac_security_pib_key_entry__get_packed_size
                     (const ApiMacSecurityPibKeyEntry   *message);
size_t api_mac_security_pib_key_entry__pack
                     (const ApiMacSecurityPibKeyEntry   *message,
                      uint8_t             *out);
size_t api_mac_security_pib_key_entry__pack_to_buffer
                     (const ApiMacSecurityPibKeyEntry   *message,
                      ProtobufCBuffer     *buffer);
ApiMacSecurityPibKeyEntry *
       api_mac_security_pib_key_entry__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   api_mac_security_pib_key_entry__free_unpacked
                     (ApiMacSecurityPibKeyEntry *message,
                      ProtobufCAllocator *allocator);
/* ApiMacSecurityPibDeviceEntry methods */
void   api_mac_security_pib_device_entry__init
                     (ApiMacSecurityPibDeviceEntry         *message);
size_t api_mac_security_pib_device_entry__get_packed_size
                     (const ApiMacSecurityPibDeviceEntry   *message);
size_t api_mac_security_pib_device_entry__pack
                     (const ApiMacSecurityPibDeviceEntry   *message,
                      uint8_t             *out);
size_t api_mac_security_pib_device_entry__pack_to_buffer
                     (const ApiMacSecurityPibDeviceEntry   *message,
                      ProtobufCBuffer     *buffer);
ApiMacSecurityPibDeviceEntry *
       api_mac_security_pib_device_entry__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   api_mac_security_pib_device_entry__free_unpacked
                     (ApiMacSecurityPibDeviceEntry *message,
                      ProtobufCAllocator *allocator);
/* ApiMacSecurityPibSecurityLevelEntry methods */
void   api_mac_security_pib_security_level_entry__init
                     (ApiMacSecurityPibSecurityLevelEntry         *message);
size_t api_mac_security_pib_security_level_entry__get_packed_size
                     (const ApiMacSecurityPibSecurityLevelEntry   *message);
size_t api_mac_security_pib_security_level_entry__pack
                     (const ApiMacSecurityPibSecurityLevelEntry   *message,
                      uint8_t             *out);
size_t api_mac_security_pib_security_level_entry__pack_to_buffer
                     (const ApiMacSecurityPibSecurityLevelEntry   *message,
                      ProtobufCBuffer     *buffer);
ApiMacSecurityPibSecurityLevelEntry *
       api_mac_security_pib_security_level_entry__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   api_mac_security_pib_security_level_entry__free_unpacked
                     (ApiMacSecurityPibSecurityLevelEntry *message,
                      ProtobufCAllocator *allocator);
/* ApiMacCapabilityInfo methods */
void   api_mac_capability_info__init
                     (ApiMacCapabilityInfo         *message);
size_t api_mac_capability_info__get_packed_size
                     (const ApiMacCapabilityInfo   *message);
size_t api_mac_capability_info__pack
                     (const ApiMacCapabilityInfo   *message,
                      uint8_t             *out);
size_t api_mac_capability_info__pack_to_buffer
                     (const ApiMacCapabilityInfo   *message,
                      ProtobufCBuffer     *buffer);
ApiMacCapabilityInfo *
       api_mac_capability_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   api_mac_capability_info__free_unpacked
                     (ApiMacCapabilityInfo *message,
                      ProtobufCAllocator *allocator);
/* ApiMacTxOptions methods */
void   api_mac_tx_options__init
                     (ApiMacTxOptions         *message);
size_t api_mac_tx_options__get_packed_size
                     (const ApiMacTxOptions   *message);
size_t api_mac_tx_options__pack
                     (const ApiMacTxOptions   *message,
                      uint8_t             *out);
size_t api_mac_tx_options__pack_to_buffer
                     (const ApiMacTxOptions   *message,
                      ProtobufCBuffer     *buffer);
ApiMacTxOptions *
       api_mac_tx_options__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   api_mac_tx_options__free_unpacked
                     (ApiMacTxOptions *message,
                      ProtobufCAllocator *allocator);
/* ApiMacMcpsDataReq methods */
void   api_mac_mcps_data_req__init
                     (ApiMacMcpsDataReq         *message);
size_t api_mac_mcps_data_req__get_packed_size
                     (const ApiMacMcpsDataReq   *message);
size_t api_mac_mcps_data_req__pack
                     (const ApiMacMcpsDataReq   *message,
                      uint8_t             *out);
size_t api_mac_mcps_data_req__pack_to_buffer
                     (const ApiMacMcpsDataReq   *message,
                      ProtobufCBuffer     *buffer);
ApiMacMcpsDataReq *
       api_mac_mcps_data_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   api_mac_mcps_data_req__free_unpacked
                     (ApiMacMcpsDataReq *message,
                      ProtobufCAllocator *allocator);
/* ApiMacPayloadIeItem methods */
void   api_mac_payload_ie_item__init
                     (ApiMacPayloadIeItem         *message);
size_t api_mac_payload_ie_item__get_packed_size
                     (const ApiMacPayloadIeItem   *message);
size_t api_mac_payload_ie_item__pack
                     (const ApiMacPayloadIeItem   *message,
                      uint8_t             *out);
size_t api_mac_payload_ie_item__pack_to_buffer
                     (const ApiMacPayloadIeItem   *message,
                      ProtobufCBuffer     *buffer);
ApiMacPayloadIeItem *
       api_mac_payload_ie_item__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   api_mac_payload_ie_item__free_unpacked
                     (ApiMacPayloadIeItem *message,
                      ProtobufCAllocator *allocator);
/* ApiMacMcpsDataInd methods */
void   api_mac_mcps_data_ind__init
                     (ApiMacMcpsDataInd         *message);
size_t api_mac_mcps_data_ind__get_packed_size
                     (const ApiMacMcpsDataInd   *message);
size_t api_mac_mcps_data_ind__pack
                     (const ApiMacMcpsDataInd   *message,
                      uint8_t             *out);
size_t api_mac_mcps_data_ind__pack_to_buffer
                     (const ApiMacMcpsDataInd   *message,
                      ProtobufCBuffer     *buffer);
ApiMacMcpsDataInd *
       api_mac_mcps_data_ind__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   api_mac_mcps_data_ind__free_unpacked
                     (ApiMacMcpsDataInd *message,
                      ProtobufCAllocator *allocator);
/* ApiMacMcpsDataCnf methods */
void   api_mac_mcps_data_cnf__init
                     (ApiMacMcpsDataCnf         *message);
size_t api_mac_mcps_data_cnf__get_packed_size
                     (const ApiMacMcpsDataCnf   *message);
size_t api_mac_mcps_data_cnf__pack
                     (const ApiMacMcpsDataCnf   *message,
                      uint8_t             *out);
size_t api_mac_mcps_data_cnf__pack_to_buffer
                     (const ApiMacMcpsDataCnf   *message,
                      ProtobufCBuffer     *buffer);
ApiMacMcpsDataCnf *
       api_mac_mcps_data_cnf__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   api_mac_mcps_data_cnf__free_unpacked
                     (ApiMacMcpsDataCnf *message,
                      ProtobufCAllocator *allocator);
/* ApiMacMcpsPurgeCnf methods */
void   api_mac_mcps_purge_cnf__init
                     (ApiMacMcpsPurgeCnf         *message);
size_t api_mac_mcps_purge_cnf__get_packed_size
                     (const ApiMacMcpsPurgeCnf   *message);
size_t api_mac_mcps_purge_cnf__pack
                     (const ApiMacMcpsPurgeCnf   *message,
                      uint8_t             *out);
size_t api_mac_mcps_purge_cnf__pack_to_buffer
                     (const ApiMacMcpsPurgeCnf   *message,
                      ProtobufCBuffer     *buffer);
ApiMacMcpsPurgeCnf *
       api_mac_mcps_purge_cnf__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   api_mac_mcps_purge_cnf__free_unpacked
                     (ApiMacMcpsPurgeCnf *message,
                      ProtobufCAllocator *allocator);
/* ApiMacPanDesc methods */
void   api_mac_pan_desc__init
                     (ApiMacPanDesc         *message);
size_t api_mac_pan_desc__get_packed_size
                     (const ApiMacPanDesc   *message);
size_t api_mac_pan_desc__pack
                     (const ApiMacPanDesc   *message,
                      uint8_t             *out);
size_t api_mac_pan_desc__pack_to_buffer
                     (const ApiMacPanDesc   *message,
                      ProtobufCBuffer     *buffer);
ApiMacPanDesc *
       api_mac_pan_desc__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   api_mac_pan_desc__free_unpacked
                     (ApiMacPanDesc *message,
                      ProtobufCAllocator *allocator);
/* ApiMacMlmeAssociateReq methods */
void   api_mac_mlme_associate_req__init
                     (ApiMacMlmeAssociateReq         *message);
size_t api_mac_mlme_associate_req__get_packed_size
                     (const ApiMacMlmeAssociateReq   *message);
size_t api_mac_mlme_associate_req__pack
                     (const ApiMacMlmeAssociateReq   *message,
                      uint8_t             *out);
size_t api_mac_mlme_associate_req__pack_to_buffer
                     (const ApiMacMlmeAssociateReq   *message,
                      ProtobufCBuffer     *buffer);
ApiMacMlmeAssociateReq *
       api_mac_mlme_associate_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   api_mac_mlme_associate_req__free_unpacked
                     (ApiMacMlmeAssociateReq *message,
                      ProtobufCAllocator *allocator);
/* ApiMacMlmeAssociateRsp methods */
void   api_mac_mlme_associate_rsp__init
                     (ApiMacMlmeAssociateRsp         *message);
size_t api_mac_mlme_associate_rsp__get_packed_size
                     (const ApiMacMlmeAssociateRsp   *message);
size_t api_mac_mlme_associate_rsp__pack
                     (const ApiMacMlmeAssociateRsp   *message,
                      uint8_t             *out);
size_t api_mac_mlme_associate_rsp__pack_to_buffer
                     (const ApiMacMlmeAssociateRsp   *message,
                      ProtobufCBuffer     *buffer);
ApiMacMlmeAssociateRsp *
       api_mac_mlme_associate_rsp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   api_mac_mlme_associate_rsp__free_unpacked
                     (ApiMacMlmeAssociateRsp *message,
                      ProtobufCAllocator *allocator);
/* ApiMacMlmeDisassociateReq methods */
void   api_mac_mlme_disassociate_req__init
                     (ApiMacMlmeDisassociateReq         *message);
size_t api_mac_mlme_disassociate_req__get_packed_size
                     (const ApiMacMlmeDisassociateReq   *message);
size_t api_mac_mlme_disassociate_req__pack
                     (const ApiMacMlmeDisassociateReq   *message,
                      uint8_t             *out);
size_t api_mac_mlme_disassociate_req__pack_to_buffer
                     (const ApiMacMlmeDisassociateReq   *message,
                      ProtobufCBuffer     *buffer);
ApiMacMlmeDisassociateReq *
       api_mac_mlme_disassociate_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   api_mac_mlme_disassociate_req__free_unpacked
                     (ApiMacMlmeDisassociateReq *message,
                      ProtobufCAllocator *allocator);
/* ApiMacMlmeOrphanRsp methods */
void   api_mac_mlme_orphan_rsp__init
                     (ApiMacMlmeOrphanRsp         *message);
size_t api_mac_mlme_orphan_rsp__get_packed_size
                     (const ApiMacMlmeOrphanRsp   *message);
size_t api_mac_mlme_orphan_rsp__pack
                     (const ApiMacMlmeOrphanRsp   *message,
                      uint8_t             *out);
size_t api_mac_mlme_orphan_rsp__pack_to_buffer
                     (const ApiMacMlmeOrphanRsp   *message,
                      ProtobufCBuffer     *buffer);
ApiMacMlmeOrphanRsp *
       api_mac_mlme_orphan_rsp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   api_mac_mlme_orphan_rsp__free_unpacked
                     (ApiMacMlmeOrphanRsp *message,
                      ProtobufCAllocator *allocator);
/* ApiMacMlmePollReq methods */
void   api_mac_mlme_poll_req__init
                     (ApiMacMlmePollReq         *message);
size_t api_mac_mlme_poll_req__get_packed_size
                     (const ApiMacMlmePollReq   *message);
size_t api_mac_mlme_poll_req__pack
                     (const ApiMacMlmePollReq   *message,
                      uint8_t             *out);
size_t api_mac_mlme_poll_req__pack_to_buffer
                     (const ApiMacMlmePollReq   *message,
                      ProtobufCBuffer     *buffer);
ApiMacMlmePollReq *
       api_mac_mlme_poll_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   api_mac_mlme_poll_req__free_unpacked
                     (ApiMacMlmePollReq *message,
                      ProtobufCAllocator *allocator);
/* ApiMacMlmeScanReq methods */
void   api_mac_mlme_scan_req__init
                     (ApiMacMlmeScanReq         *message);
size_t api_mac_mlme_scan_req__get_packed_size
                     (const ApiMacMlmeScanReq   *message);
size_t api_mac_mlme_scan_req__pack
                     (const ApiMacMlmeScanReq   *message,
                      uint8_t             *out);
size_t api_mac_mlme_scan_req__pack_to_buffer
                     (const ApiMacMlmeScanReq   *message,
                      ProtobufCBuffer     *buffer);
ApiMacMlmeScanReq *
       api_mac_mlme_scan_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   api_mac_mlme_scan_req__free_unpacked
                     (ApiMacMlmeScanReq *message,
                      ProtobufCAllocator *allocator);
/* ApiMacMpmParams methods */
void   api_mac_mpm_params__init
                     (ApiMacMpmParams         *message);
size_t api_mac_mpm_params__get_packed_size
                     (const ApiMacMpmParams   *message);
size_t api_mac_mpm_params__pack
                     (const ApiMacMpmParams   *message,
                      uint8_t             *out);
size_t api_mac_mpm_params__pack_to_buffer
                     (const ApiMacMpmParams   *message,
                      ProtobufCBuffer     *buffer);
ApiMacMpmParams *
       api_mac_mpm_params__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   api_mac_mpm_params__free_unpacked
                     (ApiMacMpmParams *message,
                      ProtobufCAllocator *allocator);
/* ApiMacMlmeStartReq methods */
void   api_mac_mlme_start_req__init
                     (ApiMacMlmeStartReq         *message);
size_t api_mac_mlme_start_req__get_packed_size
                     (const ApiMacMlmeStartReq   *message);
size_t api_mac_mlme_start_req__pack
                     (const ApiMacMlmeStartReq   *message,
                      uint8_t             *out);
size_t api_mac_mlme_start_req__pack_to_buffer
                     (const ApiMacMlmeStartReq   *message,
                      ProtobufCBuffer     *buffer);
ApiMacMlmeStartReq *
       api_mac_mlme_start_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   api_mac_mlme_start_req__free_unpacked
                     (ApiMacMlmeStartReq *message,
                      ProtobufCAllocator *allocator);
/* ApiMacSyncReq methods */
void   api_mac_sync_req__init
                     (ApiMacSyncReq         *message);
size_t api_mac_sync_req__get_packed_size
                     (const ApiMacSyncReq   *message);
size_t api_mac_sync_req__pack
                     (const ApiMacSyncReq   *message,
                      uint8_t             *out);
size_t api_mac_sync_req__pack_to_buffer
                     (const ApiMacSyncReq   *message,
                      ProtobufCBuffer     *buffer);
ApiMacSyncReq *
       api_mac_sync_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   api_mac_sync_req__free_unpacked
                     (ApiMacSyncReq *message,
                      ProtobufCAllocator *allocator);
/* ApiMacMlmeWSAsyncReq methods */
void   api_mac_mlme_wsasync_req__init
                     (ApiMacMlmeWSAsyncReq         *message);
size_t api_mac_mlme_wsasync_req__get_packed_size
                     (const ApiMacMlmeWSAsyncReq   *message);
size_t api_mac_mlme_wsasync_req__pack
                     (const ApiMacMlmeWSAsyncReq   *message,
                      uint8_t             *out);
size_t api_mac_mlme_wsasync_req__pack_to_buffer
                     (const ApiMacMlmeWSAsyncReq   *message,
                      ProtobufCBuffer     *buffer);
ApiMacMlmeWSAsyncReq *
       api_mac_mlme_wsasync_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   api_mac_mlme_wsasync_req__free_unpacked
                     (ApiMacMlmeWSAsyncReq *message,
                      ProtobufCAllocator *allocator);
/* ApiMacMlmeAssociateInd methods */
void   api_mac_mlme_associate_ind__init
                     (ApiMacMlmeAssociateInd         *message);
size_t api_mac_mlme_associate_ind__get_packed_size
                     (const ApiMacMlmeAssociateInd   *message);
size_t api_mac_mlme_associate_ind__pack
                     (const ApiMacMlmeAssociateInd   *message,
                      uint8_t             *out);
size_t api_mac_mlme_associate_ind__pack_to_buffer
                     (const ApiMacMlmeAssociateInd   *message,
                      ProtobufCBuffer     *buffer);
ApiMacMlmeAssociateInd *
       api_mac_mlme_associate_ind__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   api_mac_mlme_associate_ind__free_unpacked
                     (ApiMacMlmeAssociateInd *message,
                      ProtobufCAllocator *allocator);
/* ApiMacMlmeAssociateCnf methods */
void   api_mac_mlme_associate_cnf__init
                     (ApiMacMlmeAssociateCnf         *message);
size_t api_mac_mlme_associate_cnf__get_packed_size
                     (const ApiMacMlmeAssociateCnf   *message);
size_t api_mac_mlme_associate_cnf__pack
                     (const ApiMacMlmeAssociateCnf   *message,
                      uint8_t             *out);
size_t api_mac_mlme_associate_cnf__pack_to_buffer
                     (const ApiMacMlmeAssociateCnf   *message,
                      ProtobufCBuffer     *buffer);
ApiMacMlmeAssociateCnf *
       api_mac_mlme_associate_cnf__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   api_mac_mlme_associate_cnf__free_unpacked
                     (ApiMacMlmeAssociateCnf *message,
                      ProtobufCAllocator *allocator);
/* ApiMacMlmeDisassociateInd methods */
void   api_mac_mlme_disassociate_ind__init
                     (ApiMacMlmeDisassociateInd         *message);
size_t api_mac_mlme_disassociate_ind__get_packed_size
                     (const ApiMacMlmeDisassociateInd   *message);
size_t api_mac_mlme_disassociate_ind__pack
                     (const ApiMacMlmeDisassociateInd   *message,
                      uint8_t             *out);
size_t api_mac_mlme_disassociate_ind__pack_to_buffer
                     (const ApiMacMlmeDisassociateInd   *message,
                      ProtobufCBuffer     *buffer);
ApiMacMlmeDisassociateInd *
       api_mac_mlme_disassociate_ind__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   api_mac_mlme_disassociate_ind__free_unpacked
                     (ApiMacMlmeDisassociateInd *message,
                      ProtobufCAllocator *allocator);
/* ApiMacMlmeDisassociateCnf methods */
void   api_mac_mlme_disassociate_cnf__init
                     (ApiMacMlmeDisassociateCnf         *message);
size_t api_mac_mlme_disassociate_cnf__get_packed_size
                     (const ApiMacMlmeDisassociateCnf   *message);
size_t api_mac_mlme_disassociate_cnf__pack
                     (const ApiMacMlmeDisassociateCnf   *message,
                      uint8_t             *out);
size_t api_mac_mlme_disassociate_cnf__pack_to_buffer
                     (const ApiMacMlmeDisassociateCnf   *message,
                      ProtobufCBuffer     *buffer);
ApiMacMlmeDisassociateCnf *
       api_mac_mlme_disassociate_cnf__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   api_mac_mlme_disassociate_cnf__free_unpacked
                     (ApiMacMlmeDisassociateCnf *message,
                      ProtobufCAllocator *allocator);
/* ApiMacBeaconData methods */
void   api_mac_beacon_data__init
                     (ApiMacBeaconData         *message);
size_t api_mac_beacon_data__get_packed_size
                     (const ApiMacBeaconData   *message);
size_t api_mac_beacon_data__pack
                     (const ApiMacBeaconData   *message,
                      uint8_t             *out);
size_t api_mac_beacon_data__pack_to_buffer
                     (const ApiMacBeaconData   *message,
                      ProtobufCBuffer     *buffer);
ApiMacBeaconData *
       api_mac_beacon_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   api_mac_beacon_data__free_unpacked
                     (ApiMacBeaconData *message,
                      ProtobufCAllocator *allocator);
/* ApiMacCoexist methods */
void   api_mac_coexist__init
                     (ApiMacCoexist         *message);
size_t api_mac_coexist__get_packed_size
                     (const ApiMacCoexist   *message);
size_t api_mac_coexist__pack
                     (const ApiMacCoexist   *message,
                      uint8_t             *out);
size_t api_mac_coexist__pack_to_buffer
                     (const ApiMacCoexist   *message,
                      ProtobufCBuffer     *buffer);
ApiMacCoexist *
       api_mac_coexist__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   api_mac_coexist__free_unpacked
                     (ApiMacCoexist *message,
                      ProtobufCAllocator *allocator);
/* ApiMacEBeaconData methods */
void   api_mac_e_beacon_data__init
                     (ApiMacEBeaconData         *message);
size_t api_mac_e_beacon_data__get_packed_size
                     (const ApiMacEBeaconData   *message);
size_t api_mac_e_beacon_data__pack
                     (const ApiMacEBeaconData   *message,
                      uint8_t             *out);
size_t api_mac_e_beacon_data__pack_to_buffer
                     (const ApiMacEBeaconData   *message,
                      ProtobufCBuffer     *buffer);
ApiMacEBeaconData *
       api_mac_e_beacon_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   api_mac_e_beacon_data__free_unpacked
                     (ApiMacEBeaconData *message,
                      ProtobufCAllocator *allocator);
/* ApiMacMlmeBeaconNotifyInd methods */
void   api_mac_mlme_beacon_notify_ind__init
                     (ApiMacMlmeBeaconNotifyInd         *message);
size_t api_mac_mlme_beacon_notify_ind__get_packed_size
                     (const ApiMacMlmeBeaconNotifyInd   *message);
size_t api_mac_mlme_beacon_notify_ind__pack
                     (const ApiMacMlmeBeaconNotifyInd   *message,
                      uint8_t             *out);
size_t api_mac_mlme_beacon_notify_ind__pack_to_buffer
                     (const ApiMacMlmeBeaconNotifyInd   *message,
                      ProtobufCBuffer     *buffer);
ApiMacMlmeBeaconNotifyInd *
       api_mac_mlme_beacon_notify_ind__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   api_mac_mlme_beacon_notify_ind__free_unpacked
                     (ApiMacMlmeBeaconNotifyInd *message,
                      ProtobufCAllocator *allocator);
/* ApiMacMlmeOrphanInd methods */
void   api_mac_mlme_orphan_ind__init
                     (ApiMacMlmeOrphanInd         *message);
size_t api_mac_mlme_orphan_ind__get_packed_size
                     (const ApiMacMlmeOrphanInd   *message);
size_t api_mac_mlme_orphan_ind__pack
                     (const ApiMacMlmeOrphanInd   *message,
                      uint8_t             *out);
size_t api_mac_mlme_orphan_ind__pack_to_buffer
                     (const ApiMacMlmeOrphanInd   *message,
                      ProtobufCBuffer     *buffer);
ApiMacMlmeOrphanInd *
       api_mac_mlme_orphan_ind__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   api_mac_mlme_orphan_ind__free_unpacked
                     (ApiMacMlmeOrphanInd *message,
                      ProtobufCAllocator *allocator);
/* ApiMacMlmeScanCnf methods */
void   api_mac_mlme_scan_cnf__init
                     (ApiMacMlmeScanCnf         *message);
size_t api_mac_mlme_scan_cnf__get_packed_size
                     (const ApiMacMlmeScanCnf   *message);
size_t api_mac_mlme_scan_cnf__pack
                     (const ApiMacMlmeScanCnf   *message,
                      uint8_t             *out);
size_t api_mac_mlme_scan_cnf__pack_to_buffer
                     (const ApiMacMlmeScanCnf   *message,
                      ProtobufCBuffer     *buffer);
ApiMacMlmeScanCnf *
       api_mac_mlme_scan_cnf__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   api_mac_mlme_scan_cnf__free_unpacked
                     (ApiMacMlmeScanCnf *message,
                      ProtobufCAllocator *allocator);
/* ApiMacMlmeStartCnf methods */
void   api_mac_mlme_start_cnf__init
                     (ApiMacMlmeStartCnf         *message);
size_t api_mac_mlme_start_cnf__get_packed_size
                     (const ApiMacMlmeStartCnf   *message);
size_t api_mac_mlme_start_cnf__pack
                     (const ApiMacMlmeStartCnf   *message,
                      uint8_t             *out);
size_t api_mac_mlme_start_cnf__pack_to_buffer
                     (const ApiMacMlmeStartCnf   *message,
                      ProtobufCBuffer     *buffer);
ApiMacMlmeStartCnf *
       api_mac_mlme_start_cnf__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   api_mac_mlme_start_cnf__free_unpacked
                     (ApiMacMlmeStartCnf *message,
                      ProtobufCAllocator *allocator);
/* ApiMacMlmeSyncLossInd methods */
void   api_mac_mlme_sync_loss_ind__init
                     (ApiMacMlmeSyncLossInd         *message);
size_t api_mac_mlme_sync_loss_ind__get_packed_size
                     (const ApiMacMlmeSyncLossInd   *message);
size_t api_mac_mlme_sync_loss_ind__pack
                     (const ApiMacMlmeSyncLossInd   *message,
                      uint8_t             *out);
size_t api_mac_mlme_sync_loss_ind__pack_to_buffer
                     (const ApiMacMlmeSyncLossInd   *message,
                      ProtobufCBuffer     *buffer);
ApiMacMlmeSyncLossInd *
       api_mac_mlme_sync_loss_ind__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   api_mac_mlme_sync_loss_ind__free_unpacked
                     (ApiMacMlmeSyncLossInd *message,
                      ProtobufCAllocator *allocator);
/* ApiMacMlmePollCnf methods */
void   api_mac_mlme_poll_cnf__init
                     (ApiMacMlmePollCnf         *message);
size_t api_mac_mlme_poll_cnf__get_packed_size
                     (const ApiMacMlmePollCnf   *message);
size_t api_mac_mlme_poll_cnf__pack
                     (const ApiMacMlmePollCnf   *message,
                      uint8_t             *out);
size_t api_mac_mlme_poll_cnf__pack_to_buffer
                     (const ApiMacMlmePollCnf   *message,
                      ProtobufCBuffer     *buffer);
ApiMacMlmePollCnf *
       api_mac_mlme_poll_cnf__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   api_mac_mlme_poll_cnf__free_unpacked
                     (ApiMacMlmePollCnf *message,
                      ProtobufCAllocator *allocator);
/* ApiMacMlmeCommStatusInd methods */
void   api_mac_mlme_comm_status_ind__init
                     (ApiMacMlmeCommStatusInd         *message);
size_t api_mac_mlme_comm_status_ind__get_packed_size
                     (const ApiMacMlmeCommStatusInd   *message);
size_t api_mac_mlme_comm_status_ind__pack
                     (const ApiMacMlmeCommStatusInd   *message,
                      uint8_t             *out);
size_t api_mac_mlme_comm_status_ind__pack_to_buffer
                     (const ApiMacMlmeCommStatusInd   *message,
                      ProtobufCBuffer     *buffer);
ApiMacMlmeCommStatusInd *
       api_mac_mlme_comm_status_ind__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   api_mac_mlme_comm_status_ind__free_unpacked
                     (ApiMacMlmeCommStatusInd *message,
                      ProtobufCAllocator *allocator);
/* ApiMacMlmePollInd methods */
void   api_mac_mlme_poll_ind__init
                     (ApiMacMlmePollInd         *message);
size_t api_mac_mlme_poll_ind__get_packed_size
                     (const ApiMacMlmePollInd   *message);
size_t api_mac_mlme_poll_ind__pack
                     (const ApiMacMlmePollInd   *message,
                      uint8_t             *out);
size_t api_mac_mlme_poll_ind__pack_to_buffer
                     (const ApiMacMlmePollInd   *message,
                      ProtobufCBuffer     *buffer);
ApiMacMlmePollInd *
       api_mac_mlme_poll_ind__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   api_mac_mlme_poll_ind__free_unpacked
                     (ApiMacMlmePollInd *message,
                      ProtobufCAllocator *allocator);
/* ApiMacMlmeWsAsyncInd methods */
void   api_mac_mlme_ws_async_ind__init
                     (ApiMacMlmeWsAsyncInd         *message);
size_t api_mac_mlme_ws_async_ind__get_packed_size
                     (const ApiMacMlmeWsAsyncInd   *message);
size_t api_mac_mlme_ws_async_ind__pack
                     (const ApiMacMlmeWsAsyncInd   *message,
                      uint8_t             *out);
size_t api_mac_mlme_ws_async_ind__pack_to_buffer
                     (const ApiMacMlmeWsAsyncInd   *message,
                      ProtobufCBuffer     *buffer);
ApiMacMlmeWsAsyncInd *
       api_mac_mlme_ws_async_ind__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   api_mac_mlme_ws_async_ind__free_unpacked
                     (ApiMacMlmeWsAsyncInd *message,
                      ProtobufCAllocator *allocator);
/* ApiMacMlmeWsAsyncCnfK methods */
void   api_mac_mlme_ws_async_cnf_k__init
                     (ApiMacMlmeWsAsyncCnfK         *message);
size_t api_mac_mlme_ws_async_cnf_k__get_packed_size
                     (const ApiMacMlmeWsAsyncCnfK   *message);
size_t api_mac_mlme_ws_async_cnf_k__pack
                     (const ApiMacMlmeWsAsyncCnfK   *message,
                      uint8_t             *out);
size_t api_mac_mlme_ws_async_cnf_k__pack_to_buffer
                     (const ApiMacMlmeWsAsyncCnfK   *message,
                      ProtobufCBuffer     *buffer);
ApiMacMlmeWsAsyncCnfK *
       api_mac_mlme_ws_async_cnf_k__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   api_mac_mlme_ws_async_cnf_k__free_unpacked
                     (ApiMacMlmeWsAsyncCnfK *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*ApiMacSAddr_Closure)
                 (const ApiMacSAddr *message,
                  void *closure_data);
typedef void (*ApiMacSData_Closure)
                 (const ApiMacSData *message,
                  void *closure_data);
typedef void (*ApiMacMRFSKPHYDesc_Closure)
                 (const ApiMacMRFSKPHYDesc *message,
                  void *closure_data);
typedef void (*ApiMacSec_Closure)
                 (const ApiMacSec *message,
                  void *closure_data);
typedef void (*ApiMacKeyIdLookupDescriptor_Closure)
                 (const ApiMacKeyIdLookupDescriptor *message,
                  void *closure_data);
typedef void (*ApiMacKeyDeviceDescriptor_Closure)
                 (const ApiMacKeyDeviceDescriptor *message,
                  void *closure_data);
typedef void (*ApiMacKeyUsageDescriptor_Closure)
                 (const ApiMacKeyUsageDescriptor *message,
                  void *closure_data);
typedef void (*ApiMacKeyDescriptor_Closure)
                 (const ApiMacKeyDescriptor *message,
                  void *closure_data);
typedef void (*ApiMacDeviceDescriptor_Closure)
                 (const ApiMacDeviceDescriptor *message,
                  void *closure_data);
typedef void (*ApiMacSecurityLevelDescriptor_Closure)
                 (const ApiMacSecurityLevelDescriptor *message,
                  void *closure_data);
typedef void (*ApiMacSecurityDeviceDescriptor_Closure)
                 (const ApiMacSecurityDeviceDescriptor *message,
                  void *closure_data);
typedef void (*ApiMacSecurityKeyEntry_Closure)
                 (const ApiMacSecurityKeyEntry *message,
                  void *closure_data);
typedef void (*ApiMacSecurityPibKeyIdLookupEntry_Closure)
                 (const ApiMacSecurityPibKeyIdLookupEntry *message,
                  void *closure_data);
typedef void (*ApiMacSecurityPibKeyDeviceEntry_Closure)
                 (const ApiMacSecurityPibKeyDeviceEntry *message,
                  void *closure_data);
typedef void (*ApiMacSecurityPibKeyUsageEnttry_Closure)
                 (const ApiMacSecurityPibKeyUsageEnttry *message,
                  void *closure_data);
typedef void (*ApiMacSecurityPibKeyEntry_Closure)
                 (const ApiMacSecurityPibKeyEntry *message,
                  void *closure_data);
typedef void (*ApiMacSecurityPibDeviceEntry_Closure)
                 (const ApiMacSecurityPibDeviceEntry *message,
                  void *closure_data);
typedef void (*ApiMacSecurityPibSecurityLevelEntry_Closure)
                 (const ApiMacSecurityPibSecurityLevelEntry *message,
                  void *closure_data);
typedef void (*ApiMacCapabilityInfo_Closure)
                 (const ApiMacCapabilityInfo *message,
                  void *closure_data);
typedef void (*ApiMacTxOptions_Closure)
                 (const ApiMacTxOptions *message,
                  void *closure_data);
typedef void (*ApiMacMcpsDataReq_Closure)
                 (const ApiMacMcpsDataReq *message,
                  void *closure_data);
typedef void (*ApiMacPayloadIeItem_Closure)
                 (const ApiMacPayloadIeItem *message,
                  void *closure_data);
typedef void (*ApiMacMcpsDataInd_Closure)
                 (const ApiMacMcpsDataInd *message,
                  void *closure_data);
typedef void (*ApiMacMcpsDataCnf_Closure)
                 (const ApiMacMcpsDataCnf *message,
                  void *closure_data);
typedef void (*ApiMacMcpsPurgeCnf_Closure)
                 (const ApiMacMcpsPurgeCnf *message,
                  void *closure_data);
typedef void (*ApiMacPanDesc_Closure)
                 (const ApiMacPanDesc *message,
                  void *closure_data);
typedef void (*ApiMacMlmeAssociateReq_Closure)
                 (const ApiMacMlmeAssociateReq *message,
                  void *closure_data);
typedef void (*ApiMacMlmeAssociateRsp_Closure)
                 (const ApiMacMlmeAssociateRsp *message,
                  void *closure_data);
typedef void (*ApiMacMlmeDisassociateReq_Closure)
                 (const ApiMacMlmeDisassociateReq *message,
                  void *closure_data);
typedef void (*ApiMacMlmeOrphanRsp_Closure)
                 (const ApiMacMlmeOrphanRsp *message,
                  void *closure_data);
typedef void (*ApiMacMlmePollReq_Closure)
                 (const ApiMacMlmePollReq *message,
                  void *closure_data);
typedef void (*ApiMacMlmeScanReq_Closure)
                 (const ApiMacMlmeScanReq *message,
                  void *closure_data);
typedef void (*ApiMacMpmParams_Closure)
                 (const ApiMacMpmParams *message,
                  void *closure_data);
typedef void (*ApiMacMlmeStartReq_Closure)
                 (const ApiMacMlmeStartReq *message,
                  void *closure_data);
typedef void (*ApiMacSyncReq_Closure)
                 (const ApiMacSyncReq *message,
                  void *closure_data);
typedef void (*ApiMacMlmeWSAsyncReq_Closure)
                 (const ApiMacMlmeWSAsyncReq *message,
                  void *closure_data);
typedef void (*ApiMacMlmeAssociateInd_Closure)
                 (const ApiMacMlmeAssociateInd *message,
                  void *closure_data);
typedef void (*ApiMacMlmeAssociateCnf_Closure)
                 (const ApiMacMlmeAssociateCnf *message,
                  void *closure_data);
typedef void (*ApiMacMlmeDisassociateInd_Closure)
                 (const ApiMacMlmeDisassociateInd *message,
                  void *closure_data);
typedef void (*ApiMacMlmeDisassociateCnf_Closure)
                 (const ApiMacMlmeDisassociateCnf *message,
                  void *closure_data);
typedef void (*ApiMacBeaconData_Closure)
                 (const ApiMacBeaconData *message,
                  void *closure_data);
typedef void (*ApiMacCoexist_Closure)
                 (const ApiMacCoexist *message,
                  void *closure_data);
typedef void (*ApiMacEBeaconData_Closure)
                 (const ApiMacEBeaconData *message,
                  void *closure_data);
typedef void (*ApiMacMlmeBeaconNotifyInd_Closure)
                 (const ApiMacMlmeBeaconNotifyInd *message,
                  void *closure_data);
typedef void (*ApiMacMlmeOrphanInd_Closure)
                 (const ApiMacMlmeOrphanInd *message,
                  void *closure_data);
typedef void (*ApiMacMlmeScanCnf_Closure)
                 (const ApiMacMlmeScanCnf *message,
                  void *closure_data);
typedef void (*ApiMacMlmeStartCnf_Closure)
                 (const ApiMacMlmeStartCnf *message,
                  void *closure_data);
typedef void (*ApiMacMlmeSyncLossInd_Closure)
                 (const ApiMacMlmeSyncLossInd *message,
                  void *closure_data);
typedef void (*ApiMacMlmePollCnf_Closure)
                 (const ApiMacMlmePollCnf *message,
                  void *closure_data);
typedef void (*ApiMacMlmeCommStatusInd_Closure)
                 (const ApiMacMlmeCommStatusInd *message,
                  void *closure_data);
typedef void (*ApiMacMlmePollInd_Closure)
                 (const ApiMacMlmePollInd *message,
                  void *closure_data);
typedef void (*ApiMacMlmeWsAsyncInd_Closure)
                 (const ApiMacMlmeWsAsyncInd *message,
                  void *closure_data);
typedef void (*ApiMacMlmeWsAsyncCnfK_Closure)
                 (const ApiMacMlmeWsAsyncCnfK *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    api_mac_assoc_status__descriptor;
extern const ProtobufCEnumDescriptor    api_mac_addr_type__descriptor;
extern const ProtobufCEnumDescriptor    api_mac_beacon_type__descriptor;
extern const ProtobufCEnumDescriptor    api_mac_disassociate_reason__descriptor;
extern const ProtobufCEnumDescriptor    api_mac_comm_status_reason__descriptor;
extern const ProtobufCEnumDescriptor    api_mac_status__descriptor;
extern const ProtobufCEnumDescriptor    api_mac_sec_level__descriptor;
extern const ProtobufCEnumDescriptor    api_mac_key_id_mode__descriptor;
extern const ProtobufCEnumDescriptor    api_mac_attribute_bool__descriptor;
extern const ProtobufCEnumDescriptor    api_mac_attribute_uint8__descriptor;
extern const ProtobufCEnumDescriptor    api_mac_attribute_uint16__descriptor;
extern const ProtobufCEnumDescriptor    api_mac_attribute_uint32__descriptor;
extern const ProtobufCEnumDescriptor    api_mac_attribute_array__descriptor;
extern const ProtobufCEnumDescriptor    api_mac_security_attribute_uint8__descriptor;
extern const ProtobufCEnumDescriptor    api_mac_security_attribute_uint16__descriptor;
extern const ProtobufCEnumDescriptor    api_mac_security_attrbute_array__descriptor;
extern const ProtobufCEnumDescriptor    api_mac_security_attribute_struct__descriptor;
extern const ProtobufCEnumDescriptor    api_mac__fhattribute_uint8__descriptor;
extern const ProtobufCEnumDescriptor    api_mac__fhattribute_uint16__descriptor;
extern const ProtobufCEnumDescriptor    api_mac__fhattribute_uint32__descriptor;
extern const ProtobufCEnumDescriptor    api_mac__fhattriibute_array__descriptor;
extern const ProtobufCEnumDescriptor    api_mac_fh_frame_type__descriptor;
extern const ProtobufCEnumDescriptor    api_mac_payload_iegroup__descriptor;
extern const ProtobufCEnumDescriptor    api_mac__mlmesub_ie__descriptor;
extern const ProtobufCEnumDescriptor    api_mac_wis_unsub_ie__descriptor;
extern const ProtobufCEnumDescriptor    api_mac_scan_type__descriptor;
extern const ProtobufCEnumDescriptor    api_mac_wisun_async_operation__descriptor;
extern const ProtobufCEnumDescriptor    api_mac_wisun_async_frame__descriptor;
extern const ProtobufCEnumDescriptor    api_mac_fh_dispatch_type__descriptor;
extern const ProtobufCMessageDescriptor api_mac_s_addr__descriptor;
extern const ProtobufCMessageDescriptor api_mac_s_data__descriptor;
extern const ProtobufCMessageDescriptor api_mac__mrfskphydesc__descriptor;
extern const ProtobufCMessageDescriptor api_mac_sec__descriptor;
extern const ProtobufCMessageDescriptor api_mac_key_id_lookup_descriptor__descriptor;
extern const ProtobufCMessageDescriptor api_mac_key_device_descriptor__descriptor;
extern const ProtobufCMessageDescriptor api_mac_key_usage_descriptor__descriptor;
extern const ProtobufCMessageDescriptor api_mac_key_descriptor__descriptor;
extern const ProtobufCMessageDescriptor api_mac_device_descriptor__descriptor;
extern const ProtobufCMessageDescriptor api_mac_security_level_descriptor__descriptor;
extern const ProtobufCMessageDescriptor api_mac_security_device_descriptor__descriptor;
extern const ProtobufCMessageDescriptor api_mac_security_key_entry__descriptor;
extern const ProtobufCMessageDescriptor api_mac_security_pib_key_id_lookup_entry__descriptor;
extern const ProtobufCMessageDescriptor api_mac_security_pib_key_device_entry__descriptor;
extern const ProtobufCMessageDescriptor api_mac_security_pib_key_usage_enttry__descriptor;
extern const ProtobufCMessageDescriptor api_mac_security_pib_key_entry__descriptor;
extern const ProtobufCMessageDescriptor api_mac_security_pib_device_entry__descriptor;
extern const ProtobufCMessageDescriptor api_mac_security_pib_security_level_entry__descriptor;
extern const ProtobufCMessageDescriptor api_mac_capability_info__descriptor;
extern const ProtobufCMessageDescriptor api_mac_tx_options__descriptor;
extern const ProtobufCMessageDescriptor api_mac_mcps_data_req__descriptor;
extern const ProtobufCMessageDescriptor api_mac_payload_ie_item__descriptor;
extern const ProtobufCMessageDescriptor api_mac_mcps_data_ind__descriptor;
extern const ProtobufCMessageDescriptor api_mac_mcps_data_cnf__descriptor;
extern const ProtobufCMessageDescriptor api_mac_mcps_purge_cnf__descriptor;
extern const ProtobufCMessageDescriptor api_mac_pan_desc__descriptor;
extern const ProtobufCMessageDescriptor api_mac_mlme_associate_req__descriptor;
extern const ProtobufCMessageDescriptor api_mac_mlme_associate_rsp__descriptor;
extern const ProtobufCMessageDescriptor api_mac_mlme_disassociate_req__descriptor;
extern const ProtobufCMessageDescriptor api_mac_mlme_orphan_rsp__descriptor;
extern const ProtobufCMessageDescriptor api_mac_mlme_poll_req__descriptor;
extern const ProtobufCMessageDescriptor api_mac_mlme_scan_req__descriptor;
extern const ProtobufCMessageDescriptor api_mac_mpm_params__descriptor;
extern const ProtobufCMessageDescriptor api_mac_mlme_start_req__descriptor;
extern const ProtobufCMessageDescriptor api_mac_sync_req__descriptor;
extern const ProtobufCMessageDescriptor api_mac_mlme_wsasync_req__descriptor;
extern const ProtobufCMessageDescriptor api_mac_mlme_associate_ind__descriptor;
extern const ProtobufCMessageDescriptor api_mac_mlme_associate_cnf__descriptor;
extern const ProtobufCMessageDescriptor api_mac_mlme_disassociate_ind__descriptor;
extern const ProtobufCMessageDescriptor api_mac_mlme_disassociate_cnf__descriptor;
extern const ProtobufCMessageDescriptor api_mac_beacon_data__descriptor;
extern const ProtobufCMessageDescriptor api_mac_coexist__descriptor;
extern const ProtobufCMessageDescriptor api_mac_e_beacon_data__descriptor;
extern const ProtobufCMessageDescriptor api_mac_mlme_beacon_notify_ind__descriptor;
extern const ProtobufCMessageDescriptor api_mac_mlme_orphan_ind__descriptor;
extern const ProtobufCMessageDescriptor api_mac_mlme_scan_cnf__descriptor;
extern const ProtobufCMessageDescriptor api_mac_mlme_start_cnf__descriptor;
extern const ProtobufCMessageDescriptor api_mac_mlme_sync_loss_ind__descriptor;
extern const ProtobufCMessageDescriptor api_mac_mlme_poll_cnf__descriptor;
extern const ProtobufCMessageDescriptor api_mac_mlme_comm_status_ind__descriptor;
extern const ProtobufCMessageDescriptor api_mac_mlme_poll_ind__descriptor;
extern const ProtobufCMessageDescriptor api_mac_mlme_ws_async_ind__descriptor;
extern const ProtobufCMessageDescriptor api_mac_mlme_ws_async_cnf_k__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_api_5fmac_2eproto__INCLUDED */
